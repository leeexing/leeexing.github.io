<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LEE</title>
  
  <subtitle>keep simple | keep sunshine</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leeeing.com/"/>
  <updated>2018-07-16T09:04:51.237Z</updated>
  <id>http://leeeing.com/</id>
  
  <author>
    <name>Leeing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>下半年的战场</title>
    <link href="http://leeeing.com/2018/07/16/%E6%BA%90%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
    <id>http://leeeing.com/2018/07/16/源数据管理平台/</id>
    <published>2018-07-16T08:35:57.000Z</published>
    <updated>2018-07-16T09:04:51.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个项目"><a href="#一个项目" class="headerlink" title="一个项目"></a>一个项目</h1><blockquote><p>源数据管理平台</p></blockquote><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>  有点紧张</p><p>自己需要尝试独立负责一个项目。之前一直是开发前端，现在可能需要考虑后台的一些逻辑了。</p><a id="more"></a><h2 id="该如何下手"><a href="#该如何下手" class="headerlink" title="该如何下手"></a>该如何下手</h2><ol><li>先将前端基本的页面搭建出来</li><li>先mock数据实现简单的页面效果</li><li>思考后台如何和现有的数据库进行对接</li></ol><h3 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h3><p>前端：</p><ol><li>vue – 相对来说比较熟悉</li><li>element-ui (25k,目前项目在使用，较为熟悉) / iView (14k,之前没有用过，想尝试一下)</li><li></li></ol><p>后台：</p><ol><li>python – 比较熟悉，基本的实现还可以；技术上有申育可以探讨</li><li>node + koa2 – 个人博客在使用，比较熟悉</li></ol><p>数据库：</p><ol><li>mongodb – 较为熟悉（集群之类的使用式盲点）</li><li>mySQL – 使用还可以。python项目中使用过</li></ol><h3 id="整理架构"><a href="#整理架构" class="headerlink" title="整理架构"></a>整理架构</h3><p>前后端分离是必须的。所以需要建立两个项目<br>之前的做个人博客的时候，将 server 放在的 blog 项目内。后面感觉到管理起来有点麻烦</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><blockquote><p>逐步完善</p></blockquote><h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>可能会牵涉到保密内容，后面不会进行进一步的更新。<br>只会写一些项目开发过程中的一些感悟，技术方面遇到的一些坑和总结<br>业务方面的东西暂时不表</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.iviewui.com/docs/guide/introduce" target="_blank" rel="noopener">iView</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个项目&quot;&gt;&lt;a href=&quot;#一个项目&quot; class=&quot;headerlink&quot; title=&quot;一个项目&quot;&gt;&lt;/a&gt;一个项目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;源数据管理平台&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerlink&quot; title=&quot;感想&quot;&gt;&lt;/a&gt;感想&lt;/h2&gt;&lt;p&gt;  有点紧张&lt;/p&gt;
&lt;p&gt;自己需要尝试独立负责一个项目。之前一直是开发前端，现在可能需要考虑后台的一些逻辑了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://leeeing.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>2018-summer</title>
    <link href="http://leeeing.com/2018/07/06/2018-summer/"/>
    <id>http://leeeing.com/2018/07/06/2018-summer/</id>
    <published>2018-07-06T09:13:25.000Z</published>
    <updated>2018-07-16T08:30:47.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不知不觉就夏天"><a href="#不知不觉就夏天" class="headerlink" title="不知不觉就夏天"></a>不知不觉就夏天</h1><blockquote><p>七月</p></blockquote><p>好多工作没有完成<br>一些想法没有实现<br>一些念头没有尝试<br>受了点伤，养了会病<br>静待这一月</p><a id="more"></a><h2 id="致敬"><a href="#致敬" class="headerlink" title="致敬"></a>致敬</h2><blockquote><p>勒布朗</p></blockquote><h2 id="畅想"><a href="#畅想" class="headerlink" title="畅想"></a>畅想</h2><blockquote><p>世界杯</p></blockquote><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>一点一点学，虽然还是感觉有点慢，至少在进步</p><p>捣鼓了一下 <code>vps</code> ，顿时感觉需要学习的内容太多了。<br>但，起码<br>跨出了这一步</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>近一段时间，都是缺乏锻炼的。还在打球时不小心受伤了<br>嗯<br>操蛋的生活<br>。。。<br>还在继续</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>时间过了很久似的，太久没有更新这里的博客了<br>一来有点忙<br>二者自己水平实在也有限，写不出什么质量的文章，大多是一些瞎逼逼<br>三思一下，还是做好自己的本职工作，继续充实地提升自己</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;不知不觉就夏天&quot;&gt;&lt;a href=&quot;#不知不觉就夏天&quot; class=&quot;headerlink&quot; title=&quot;不知不觉就夏天&quot;&gt;&lt;/a&gt;不知不觉就夏天&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;七月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好多工作没有完成&lt;br&gt;一些想法没有实现&lt;br&gt;一些念头没有尝试&lt;br&gt;受了点伤，养了会病&lt;br&gt;静待这一月&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://leeeing.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>march caprice</title>
    <link href="http://leeeing.com/2018/03/10/march-caprice/"/>
    <id>http://leeeing.com/2018/03/10/march-caprice/</id>
    <published>2018-03-10T01:16:09.000Z</published>
    <updated>2018-07-16T08:30:47.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杂想"><a href="#杂想" class="headerlink" title="杂想"></a>杂想</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>最近公司在招人，看了一位 python 的简历，发现自己真的还有很多只是需要去学习<br>起码对于一个框架，自己要比较熟练的使用才算合格。不能只是了解一点基本的，简单运用一下。重要的是需要多去实践</p><p>自己之前还是处于一种不太 open 的态度，对于技术有一点自私，眼界看起来太狭隘了，厉害的人是那种喜欢技术分享的，不会感觉到自己将知识分享出去会让自己变得落后，反而是人家会学习更多的知识不怕被人超越<br>心态上还是需要再做调整</p>]]></content>
    
    <summary type="html">
    
      随便聊聊
    
    </summary>
    
    
      <category term="随想" scheme="http://leeeing.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>2018 spring</title>
    <link href="http://leeeing.com/2018/03/02/2018-spring/"/>
    <id>http://leeeing.com/2018/03/02/2018-spring/</id>
    <published>2018-03-02T01:26:28.000Z</published>
    <updated>2018-07-16T08:30:47.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="春天来了"><a href="#春天来了" class="headerlink" title="春天来了"></a>春天来了</h1><blockquote><p>一年之计在于春</p></blockquote><h2 id="重新上路"><a href="#重新上路" class="headerlink" title="重新上路"></a>重新上路</h2><p>新的一年开始了，需要给自己赋予更多的能量</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>之前就预料到2018年，自己会比较的忙碌。有个项目分配到自己身上，同时项目重构上面自己也还有很多的事情需要处理，两边都需要花费自己不小的精力。再有就是自己可能还需要帮助涛哥处理一些样式上面的问题，这一点还是尽快去帮涛哥解决吧，不然后面的事情一多，可能就无暇顾及了。尽量是不要加班到太晚，同时也是每周都有时间去操场锻炼跑步的时间，需要自己合理的去安排这一切</p><p>工作上面，可能大部分都是一些重复性比较多的工作了，我在想，如何在这个过程中也能增进自己的业务能力和工作效率。需要从哪个方面去考虑才可能说做的工作是更有效的。例如多考虑一些设计模式的使用，布局时多考虑以后的可扩展性，变量命名的时候是否做到了语义化，函数是否足够简洁并且可控，也就是多思考《重构》书中所讲的一些要点。我觉得这一点如果能够做得好，对以后的项目开发都是很有帮助的</p><p>多看书，多看一些与本专业相关的书籍，只有看得多了，思考的点才会更加的发散灵活<br>多浏览技术网站，遇到好的文章，尽量自己去尝试一下，然后写下自己的总结体会，可以的话，给与文章作者一个友好的感谢性的回复</p><a id="more"></a><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><blockquote><p>不止眼前的苟且</p></blockquote><p>首先的一点是要有一个健康的身体。所以，每天的坚持锻炼时很重要的<br>回去就不要再盯着手机了，先将基本的锻炼目标达成了再去处理其他的事情。在没有其他重要紧急事情的情况下，回家第一件最重要的事情就是锻炼<br>每个周末能有一次户外锻炼的机会，如果是短程的话，早上希望能够来公司一趟，做点工作总结和计划。<br>保持一个良好的生活作息，没有必要周末开始熬夜同时第二天懒觉睡到中午，这样其实还是很累的。正常的时间休息，第二天稍微起晚点就很好了。不要为了放纵而放纵。作息规律是很重要的</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><blockquote><p>终身学习是避免不了的</p></blockquote><p>说好的，这一年要在后台方面有一个质的飞跃。所以不光是在学习视频或者书籍上要下功夫，最重要的还是要有足够的实践。给自己挤出一点时间来好好练习<br>多和在这方面有经验的同事交流，尽可能利用好身边的资源</p><p>最重要的一点其实就是两个字 – 坚持</p><h2 id="《重构》"><a href="#《重构》" class="headerlink" title="《重构》"></a>《重构》</h2><blockquote><p>使软件容易被理解和修改</p></blockquote><h3 id="代码的坏味道"><a href="#代码的坏味道" class="headerlink" title="代码的坏味道"></a>代码的坏味道</h3><ol><li>重复代码</li><li>过长函数</li><li>过大的类</li><li>过长的参数列</li><li>发散式变化</li><li>散弹式修改</li><li>依恋情结</li><li>数据泥团</li><li>基本类型偏执</li><li>switch 惊悚</li><li>冗余类</li><li>令人迷惑的暂时字段</li><li>果断耦合的消息链</li><li>狎昵关系</li><li>异曲同工的类</li><li>不完美的类库</li><li>纯稚的数据类</li><li>过多的注释</li></ol><h3 id="重新组织函数"><a href="#重新组织函数" class="headerlink" title="重新组织函数"></a>重新组织函数</h3><p>提炼函数<br>内嵌函数<br>内嵌临时变量<br>以查询取代临时变量<br>引入解释性变量<br>分解临时变量<br>移除对参数的赋值<br>以函数对象取代函数<br>替换算法</p><h3 id="在对象之间搬移特性"><a href="#在对象之间搬移特性" class="headerlink" title="在对象之间搬移特性"></a>在对象之间搬移特性</h3><ol><li>搬移函数</li><li>搬移字段</li><li>提炼类</li><li>将类内联化</li><li>隐藏“委托关系”</li><li>移除中间人</li><li>引入外加函数</li><li>引入本地扩展</li></ol><h3 id="重新组织数据"><a href="#重新组织数据" class="headerlink" title="重新组织数据"></a>重新组织数据</h3><ol><li>以对象取代数组</li><li>将单向关联改为双向关联</li><li>以字面常量取代魔法数</li><li>封装集合、字段</li><li>以数据类型取代记录</li><li>以类型取代类型码</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;春天来了&quot;&gt;&lt;a href=&quot;#春天来了&quot; class=&quot;headerlink&quot; title=&quot;春天来了&quot;&gt;&lt;/a&gt;春天来了&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一年之计在于春&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;重新上路&quot;&gt;&lt;a href=&quot;#重新上路&quot; class=&quot;headerlink&quot; title=&quot;重新上路&quot;&gt;&lt;/a&gt;重新上路&lt;/h2&gt;&lt;p&gt;新的一年开始了，需要给自己赋予更多的能量&lt;/p&gt;
&lt;h2 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h2&gt;&lt;p&gt;之前就预料到2018年，自己会比较的忙碌。有个项目分配到自己身上，同时项目重构上面自己也还有很多的事情需要处理，两边都需要花费自己不小的精力。再有就是自己可能还需要帮助涛哥处理一些样式上面的问题，这一点还是尽快去帮涛哥解决吧，不然后面的事情一多，可能就无暇顾及了。尽量是不要加班到太晚，同时也是每周都有时间去操场锻炼跑步的时间，需要自己合理的去安排这一切&lt;/p&gt;
&lt;p&gt;工作上面，可能大部分都是一些重复性比较多的工作了，我在想，如何在这个过程中也能增进自己的业务能力和工作效率。需要从哪个方面去考虑才可能说做的工作是更有效的。例如多考虑一些设计模式的使用，布局时多考虑以后的可扩展性，变量命名的时候是否做到了语义化，函数是否足够简洁并且可控，也就是多思考《重构》书中所讲的一些要点。我觉得这一点如果能够做得好，对以后的项目开发都是很有帮助的&lt;/p&gt;
&lt;p&gt;多看书，多看一些与本专业相关的书籍，只有看得多了，思考的点才会更加的发散灵活&lt;br&gt;多浏览技术网站，遇到好的文章，尽量自己去尝试一下，然后写下自己的总结体会，可以的话，给与文章作者一个友好的感谢性的回复&lt;/p&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://leeeing.com/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>js API learning</title>
    <link href="http://leeeing.com/2018/02/06/js-API-learning/"/>
    <id>http://leeeing.com/2018/02/06/js-API-learning/</id>
    <published>2018-02-06T09:14:51.000Z</published>
    <updated>2018-07-16T08:30:47.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-API"><a href="#JS-API" class="headerlink" title="JS API"></a>JS API</h1><p>工作中是不是遇到一些新的问题，哎呦，这个API使用得很顺手</p><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>这个 api 之前几乎是不会用到的。最近项目中做图像显示相关的时候发现需要将之前的base64读取出来，之前是先获取图片的的路径存放地址，再通过 sqllite 获取到图片的详细的 base64 图像数据。而 fileReader 这个api恰好能够将一个图片的读取成 baseUrl的格式，用于具体业务的图像显示恰到好处<br>不多说，直接上代码吧</p><a id="more"></a><figure class="highlight js"><figcaption><span>FileReader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.responseType = <span class="string">'blob'</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容。</span></span><br><span class="line">    reader.readAsDataURL(<span class="keyword">this</span>.response)</span><br><span class="line">    <span class="comment">// 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个字符串以表示所读取的文件内容。</span></span><br><span class="line">    reader.readerAsText()</span><br><span class="line">    <span class="comment">// 开始读取指定的Blob中的内容。一旦完成，result属性中将包含所读取文件的原始二进制数据。</span></span><br><span class="line">    reader.readAsBinaryString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">reader.onabort = <span class="function"><span class="keyword">function</span>(<span class="params">evnet</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 该事件在读取操作被中断时触发。</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'阻止触发'</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.onerror = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哎呦，文件读取发生错误'</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'文件下载完成'</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.onloadend = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'最后的最后一定执行'</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.onloadstart = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'文件读取开始'</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.onprogress = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 该事件在读取Blob时触发。</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'可以实时控制显示进度'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>具体使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">getImgDataUrl(url) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">      xhr.responseType = <span class="string">'blob'</span></span><br><span class="line">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">          reader.readAsDataURL(<span class="keyword">this</span>.response)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.send()</span><br><span class="line"></span><br><span class="line">      reader.onerror = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">      &#125;</span><br><span class="line">      reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(e.target.result)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getImgDataTxt(url) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">      xhr.responseType = <span class="string">'blob'</span></span><br><span class="line">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">          reader.readAsText(<span class="keyword">this</span>.response)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.send()</span><br><span class="line"></span><br><span class="line">      reader.onerror = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        reject(e)</span><br><span class="line">      &#125;</span><br><span class="line">      reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(e.target.result)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init_show_img(baseUrl) &#123;</span><br><span class="line">  <span class="keyword">this</span>.base_url = baseUrl</span><br><span class="line">  <span class="built_in">Promise</span>.all([<span class="keyword">this</span>.getImgDataUrl(<span class="string">`images/ct_img/<span class="subst">$&#123;baseUrl&#125;</span>/<span class="subst">$&#123;baseUrl&#125;</span>_1.0_CT.png`</span>), </span><br><span class="line">                  <span class="keyword">this</span>.getImgDataTxt(<span class="string">`images/ct_img/<span class="subst">$&#123;baseUrl&#125;</span>/<span class="subst">$&#123;baseUrl&#125;</span>_1.0_CT.png.txt`</span>),</span><br><span class="line">                  <span class="keyword">this</span>.getImgDataTxt(<span class="string">`images/ct_img/<span class="subst">$&#123;baseUrl&#125;</span>/suspect_cubes_information_<span class="subst">$&#123;baseUrl&#125;</span>_1.0_CT.png.txt`</span>)])</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.show_raw_img(data)</span><br><span class="line">          <span class="comment">// console.log(data)</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里才发现 <span class="built_in">Promise</span>.all 真的很好用</span><br></pre></td></tr></table></figure><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><p>具体代码在 github 里面的 js/formData 中</p><p>重点要说明的是：</p><p>其实后端是这么处理的<br>1、首先将文件上传到后端<br>2、后端处理后直接保存在 对应的文件件中，文件名可以保持不变<br>3、将上传的图像或者文件数据转成一个 md5 字段保存在数据库中，然后每次上传的时候首先访问数据库中是否上传过这个数据（md5是唯一的）。没有的话就进行上传并保存，上传过的就直接返回<br>4、下次某个 api 需要请求数据的时候，只需要将对应资源的物理路径冲数据库中取出来并返回即可<br>5、返回的数据资源（例如图像），需要给资源添加 协议 + 域名 + 端口 （eg: <a href="http://localhost:8001/images/123.png）" target="_blank" rel="noopener">http://localhost:8001/images/123.png）</a></p><h2 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h2><p>w3c不再维护web sql 所以很有必要了解一下 indexedDB 这个符合前端逻辑思维的 web 存储 api</p><p>文章的链接放在 github  js/indexedDB</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS-API&quot;&gt;&lt;a href=&quot;#JS-API&quot; class=&quot;headerlink&quot; title=&quot;JS API&quot;&gt;&lt;/a&gt;JS API&lt;/h1&gt;&lt;p&gt;工作中是不是遇到一些新的问题，哎呦，这个API使用得很顺手&lt;/p&gt;
&lt;h2 id=&quot;FileReader&quot;&gt;&lt;a href=&quot;#FileReader&quot; class=&quot;headerlink&quot; title=&quot;FileReader&quot;&gt;&lt;/a&gt;FileReader&lt;/h2&gt;&lt;p&gt;这个 api 之前几乎是不会用到的。最近项目中做图像显示相关的时候发现需要将之前的base64读取出来，之前是先获取图片的的路径存放地址，再通过 sqllite 获取到图片的详细的 base64 图像数据。而 fileReader 这个api恰好能够将一个图片的读取成 baseUrl的格式，用于具体业务的图像显示恰到好处&lt;br&gt;不多说，直接上代码吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://leeeing.com/tags/js/"/>
    
      <category term="api" scheme="http://leeeing.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>2018.01 summary</title>
    <link href="http://leeeing.com/2018/02/02/2018-01-summary/"/>
    <id>http://leeeing.com/2018/02/02/2018-01-summary/</id>
    <published>2018-02-02T00:52:03.000Z</published>
    <updated>2018-07-16T08:30:47.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年1月总结"><a href="#2018年1月总结" class="headerlink" title="2018年1月总结"></a>2018年1月总结</h1><blockquote><p>小楼昨夜又东风</p></blockquote><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作中一如既往的稳</p><a id="more"></a><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="一、python"><a href="#一、python" class="headerlink" title="一、python"></a>一、python</h3><ol><li>没有太多的时间花在这个知识点上面。没有能够做到熟练，基本的语法使用没有问题，涉及到不常用的库时还是需要停下来查一查，了解一些具体使用</li><li>跟着网上的一个学习教程，练习了二十来道简单的python入门题，重点是在于熟练基本的语法和类库的使用。对于以后解决某个问题时能够有一个快速联想到的方向，不至于毫无头绪</li><li>重复练习了一遍python简单的爬虫，用于的 react项目中展示。做简单的查询分类，同时也是为了熟练的使用 mongodb。但是数据量还是偏少了。下次爬网易云音乐的时候打算做一次数量比较大的爬取</li><li>对于python，基本还是处于一个写<code>def</code>的过程，写<code>class</code>还是比较少。这方面还需要多去练习</li></ol><h3 id="二、react"><a href="#二、react" class="headerlink" title="二、react"></a>二、react</h3><ol><li>这个花的时间算是比较多的。关键还是在于对<code>redux</code>使用的不熟练，不知道数据如何通信传递、不同组件之间如何获取的全局的state。一开始停留在props进行传递，发现非父子组件之间就比较困难了，在使用 redux 之前使用了 pubsub 这种订阅发布的模式，简单解决了</li><li>一直对于一个系统的权限限制不是很熟，接着这个react-blog的项目，搭配python+flask作为后台管理，总算有点感觉了，但还不能做到得心应手的理解。现在使用的是flask的seesion机制来判断。而我了解到使用cookie进行判断也是可行的，而且目前工作中就是使用的这种机制，将相关的信息保存在cookie中，每一次发起一个请求的时候，通过 axios 的 before——request进行auth的判断，对应在headers中添加相应的cookie信息，而后后端进行判断这个cookie信息是否有效。目前没有测试使用cookie方式，下一步想试试。同时有一个疑问，如果访问的是一个静态页面，没有发起后台请求，那么这个路由会进行判断登录与否的判断吗？这里没有一个前端路由跳转就判断权限的钩子函数可供使用，我也没有一直想清楚。看看吧，后面继续学习是否会解答这个疑问</li><li>react-router还没有实现配置化，现在的处理还是一堆的route元素嵌入组件中，是不是这个版本的路由就是这么使用的</li></ol><h3 id="三、vue"><a href="#三、vue" class="headerlink" title="三、vue"></a>三、vue</h3><ol><li>没有做多少工作，主要还是指导老弟更加熟练的使用vue，其中也偶尔会发现自己的一些知识盲点</li><li>恭喜老弟进入熊厂</li></ol><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ol><li>一切静好</li><li>没有太多的波澜，今年北京的冬天还是太冷了，基本上打击了我外出的念头，当然，一部分也还是自己想要学习充电</li><li>锻炼偏少的原因，工作中自己似乎犯了职业病，右侧肩膀最近老是不舒服。猜想的原因主要是，缺乏锻炼、久坐不活动、办公姿势不正确</li><li>给家里置办了一些年货，爸妈这一年也辛苦了</li><li>期待回家过年</li></ol><h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><ol><li>考虑一下好好学习 ubuntu 的 linux 这个系统。上周末就尝试安装 ubuntu 了。结果担心将机子搞坏。结果昨天同事恰好也安装 ubuntu。所以跟着他一起将 ubuntu 系统安装了。逼格有点高啊。</li><li>重点还是学习一些 shell 编程吧</li><li>将python与后台服务进行到底。重点去实验一下 mongodb 的集群和分片思想。理解 mongodb 能够带来的 noSQL 思想</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018年1月总结&quot;&gt;&lt;a href=&quot;#2018年1月总结&quot; class=&quot;headerlink&quot; title=&quot;2018年1月总结&quot;&gt;&lt;/a&gt;2018年1月总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;小楼昨夜又东风&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h2&gt;&lt;p&gt;工作中一如既往的稳&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://leeeing.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://leeeing.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="plan" scheme="http://leeeing.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>show me the code | python</title>
    <link href="http://leeeing.com/2018/01/26/show-me-the-code/"/>
    <id>http://leeeing.com/2018/01/26/show-me-the-code/</id>
    <published>2018-01-26T09:24:35.000Z</published>
    <updated>2018-07-16T08:30:47.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SHOW-ME-THE-CODE"><a href="#SHOW-ME-THE-CODE" class="headerlink" title="SHOW ME THE CODE"></a><a href="https://github.com/leeexing/python/tree/master/show-me-code" target="_blank" rel="noopener">SHOW ME THE CODE</a></h1><blockquote><p>当你在学 python 的时候，你在想什么</p></blockquote><p>针对具体的问题查漏补缺才是最快的学习<br>后续会持续更新自己在学习过程中的python习题</p><pre><code>具体查看我的 github python 项目</code></pre><a id="more"></a><h2 id="第-0000-题："><a href="#第-0000-题：" class="headerlink" title="第 0000 题："></a>第 0000 题：</h2><p>将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果</p><p>头像</p><h2 id="第-0001-题："><a href="#第-0001-题：" class="headerlink" title="第 0001 题："></a>第 0001 题：</h2><p>做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？</p><h2 id="第-0002-题"><a href="#第-0002-题" class="headerlink" title="第 0002 题:"></a>第 0002 题:</h2><p>将 0001 题生成的 200 个激活码（或者优惠券）保存到 MySQL 关系型数据库中。</p><h2 id="第-0003-题："><a href="#第-0003-题：" class="headerlink" title="第 0003 题："></a>第 0003 题：</h2><p> 将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。</p><h2 id="第-0004-题："><a href="#第-0004-题：" class="headerlink" title="第 0004 题："></a>第 0004 题：</h2><p> 任一个英文的纯文本文件，统计其中的单词出现的个数。</p><h2 id="第-0005-题："><a href="#第-0005-题：" class="headerlink" title="第 0005 题："></a>第 0005 题：</h2><p> 你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。</p><h2 id="第-0006-题："><a href="#第-0006-题：" class="headerlink" title="第 0006 题："></a>第 0006 题：</h2><p> 你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</p><h2 id="第-0007-题："><a href="#第-0007-题：" class="headerlink" title="第 0007 题："></a>第 0007 题：</h2><p> 有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。</p><h2 id="第-0008-题："><a href="#第-0008-题：" class="headerlink" title="第 0008 题："></a>第 0008 题：</h2><p> 一个HTML文件，找出里面的正文。</p><h2 id="第-0009-题："><a href="#第-0009-题：" class="headerlink" title="第 0009 题："></a>第 0009 题：</h2><p> 一个HTML文件，找出里面的链接。</p><h2 id="第-0010-题："><a href="#第-0010-题：" class="headerlink" title="第 0010 题："></a>第 0010 题：</h2><p> 使用 Python 生成类似于下图中的字母验证码图片</p><p>字母验证码</p><p>阅读资料</p><h2 id="第-0011-题："><a href="#第-0011-题：" class="headerlink" title="第 0011 题："></a>第 0011 题：</h2><p> 敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。</p><pre><code>北京程序员公务员领导牛比牛逼你娘你妈lovesexjiangge</code></pre><h2 id="第-0012-题："><a href="#第-0012-题：" class="headerlink" title="第 0012 题："></a>第 0012 题：</h2><p> 敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 * 替换，例如当用户输入「北京是个好城市」，则变成「**是个好城市」。</p><h2 id="第-0013-题："><a href="#第-0013-题：" class="headerlink" title="第 0013 题："></a>第 0013 题：</h2><p> 用 Python 写一个爬图片的程序，爬 这个链接里的日本妹子图片 :-)</p><p>参考代码</p><h2 id="第-0014-题："><a href="#第-0014-题：" class="headerlink" title="第 0014 题："></a>第 0014 题：</h2><p> 纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</p><p>{<br>    “1”:[“张三”,150,120,100],<br>    “2”:[“李四”,90,99,95],<br>    “3”:[“王五”,60,66,68]<br>}<br>请将上述内容写到 student.xls 文件中，如下图所示：</p><p>student.xls</p><p>阅读资料 腾讯游戏开发 XML 和 Excel 内容相互转换</p><h2 id="第-0015-题："><a href="#第-0015-题：" class="headerlink" title="第 0015 题："></a>第 0015 题：</h2><p> 纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：</p><p>{<br>    “1” : “上海”,<br>    “2” : “北京”,<br>    “3” : “成都”<br>}<br>请将上述内容写到 city.xls 文件中，如下图所示：</p><p>city.xls</p><h2 id="第-0016-题："><a href="#第-0016-题：" class="headerlink" title="第 0016 题："></a>第 0016 题：</h2><p> 纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示：</p><p>[<br>    [1, 82, 65535],<br>    [20, 90, 13],<br>    [26, 809, 1024]<br>]<br>请将上述内容写到 numbers.xls 文件中，如下图所示：</p><p>numbers.xls</p><h2 id="第-0017-题："><a href="#第-0017-题：" class="headerlink" title="第 0017 题："></a>第 0017 题：</h2><p> 将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;students&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">学生信息表</span><br><span class="line"><span class="string">"id"</span> : [名字, 数学, 语文, 英文]</span><br><span class="line">--&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"1"</span> : [<span class="string">"张三"</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">100</span>],</span><br><span class="line"><span class="string">"2"</span> : [<span class="string">"李四"</span>, <span class="number">90</span>, <span class="number">99</span>, <span class="number">95</span>],</span><br><span class="line"><span class="string">"3"</span> : [<span class="string">"王五"</span>, <span class="number">60</span>, <span class="number">66</span>, <span class="number">68</span>]</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/students&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>root&gt;</span><br></pre></td></tr></table></figure><h2 id="第-0018-题："><a href="#第-0018-题：" class="headerlink" title="第 0018 题："></a>第 0018 题：</h2><p> 将 ## 第 0015 题中的 city.xls 文件中的内容写到 city.xml 文件中，如下 所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xmlversion="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cities</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">城市信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">"1" : "上海",</span><br><span class="line">"2" : "北京",</span><br><span class="line">"3" : "成都"</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">cities</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第-0019-题："><a href="#第-0019-题：" class="headerlink" title="第 0019 题："></a>第 0019 题：</h2><p> 将 ## 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;numbers&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">数字信息</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">[<span class="number">1</span>, <span class="number">82</span>, <span class="number">65535</span>],</span><br><span class="line">[<span class="number">20</span>, <span class="number">90</span>, <span class="number">13</span>],</span><br><span class="line">[<span class="number">26</span>, <span class="number">809</span>, <span class="number">1024</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/numbers&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>root&gt;</span><br></pre></td></tr></table></figure><h2 id="第-0020-题："><a href="#第-0020-题：" class="headerlink" title="第 0020 题："></a>第 0020 题：</h2><p> 登陆中国联通网上营业厅 后选择「自助服务」 –&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。</p><h2 id="第-0021-题："><a href="#第-0021-题：" class="headerlink" title="第 0021 题："></a>第 0021 题：</h2><p> 通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。</p><p>阅读资料 用户密码的存储与 Python 示例</p><p>阅读资料 Hashing Strings with Python</p><p>阅读资料 Python’s safest method to store and retrieve passwords from a database</p><h2 id="第-0022-题："><a href="#第-0022-题：" class="headerlink" title="第 0022 题："></a>第 0022 题：</h2><p> iPhone 6、iPhone 6 Plus 早已上市开卖。请查看你写得 ## 第 0005 题的代码是否可以复用。</p><h2 id="第-0023-题："><a href="#第-0023-题：" class="headerlink" title="第 0023 题："></a>第 0023 题：</h2><p> 使用 Python 的 Web 框架，做一个 Web 版本 留言簿 应用。</p><p>阅读资料：Python 有哪些 Web 框架</p><p>留言簿参考</p><h2 id="第-0024-题："><a href="#第-0024-题：" class="headerlink" title="第 0024 题："></a>第 0024 题：</h2><p> 使用 Python 的 Web 框架，做一个 Web 版本 TodoList 应用。</p><p>SpringSide 版TodoList</p><h2 id="第-0025-题："><a href="#第-0025-题：" class="headerlink" title="第 0025 题："></a>第 0025 题：</h2><p> 使用 Python 实现：对着电脑吼一声,自动打开浏览器中的默认网站。</p><p>例如，对着笔记本电脑吼一声“百度”，浏览器自动打开百度首页。</p><p>关键字：Speech to Text<br>参考思路：<br>1：获取电脑录音–&gt;WAV文件 python record wav</p><p>2：录音文件–&gt;文本</p><p>STT: Speech to Text</p><p>STT API Google API<br>3:文本–&gt;电脑命令</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://github.com/Yixiaohan/show-me-the-code" target="_blank" rel="noopener">Yixiaohan</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SHOW-ME-THE-CODE&quot;&gt;&lt;a href=&quot;#SHOW-ME-THE-CODE&quot; class=&quot;headerlink&quot; title=&quot;SHOW ME THE CODE&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/leeexing/python/tree/master/show-me-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SHOW ME THE CODE&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当你在学 python 的时候，你在想什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对具体的问题查漏补缺才是最快的学习&lt;br&gt;后续会持续更新自己在学习过程中的python习题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;具体查看我的 github python 项目
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://leeeing.com/tags/python/"/>
    
      <category term="code" scheme="http://leeeing.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>python common use modules</title>
    <link href="http://leeeing.com/2018/01/24/python-library/"/>
    <id>http://leeeing.com/2018/01/24/python-library/</id>
    <published>2018-01-24T02:51:13.000Z</published>
    <updated>2018-07-16T08:30:47.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>  常用 &amp; 备忘</p><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><p>enumerate()是python的内置函数<br>enumerate在字典上是枚举、列举的意思<br>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值<br>enumerate多用于在for循环中得到计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">"这"</span>, <span class="string">"是"</span>, <span class="string">"一个"</span>, <span class="string">"测试"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (len(list1)):</span><br><span class="line">    print i ,list1[i]</span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">"这"</span>, <span class="string">"是"</span>, <span class="string">"一个"</span>, <span class="string">"测试"</span>]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">    print index, item</span><br></pre></td></tr></table></figure><p>enumerate还可以接收第二个参数，用于指定索引起始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">"这"</span>, <span class="string">"是"</span>, <span class="string">"一个"</span>, <span class="string">"测试"</span>]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(list1, <span class="number">1</span>):</span><br><span class="line">    print index, item</span><br><span class="line"></span><br><span class="line">如果要统计文件的行数，可以这样写</span><br><span class="line">count = len(open(filepath, <span class="string">'r'</span>).readlines())  -- 这种方法简单，但是可能比较慢，当文件比较大时甚至不能工作。</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index, line <span class="keyword">in</span> enumerate(open(filepath,<span class="string">'r'</span>))：</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录自己在学习python的时候常用到模块或者包
    
    </summary>
    
    
      <category term="后端" scheme="http://leeeing.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="http://leeeing.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>命名规范</title>
    <link href="http://leeeing.com/2018/01/22/name-norm/"/>
    <id>http://leeeing.com/2018/01/22/name-norm/</id>
    <published>2018-01-22T01:16:31.000Z</published>
    <updated>2018-07-16T08:30:47.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="name-norm"><a href="#name-norm" class="headerlink" title="name norm"></a>name norm</h1><h2 id="Camel-Case"><a href="#Camel-Case" class="headerlink" title="Camel Case"></a>Camel Case</h2><p><strong>小驼峰命名法</strong>：第一个单词的首字母小写；第二个单词开始每个单词的的首字母大写。例如：firstName、lastName。 大驼峰命名法（Upper Camel Case：每一个单词的首字母都大写。例如：FirstName、LastName、CamelCase。也被称为 Pascal 命名法（Pascal Case）,源自于 Pascal 语言的命名惯例。 </p><h2 id="Snake-Case"><a href="#Snake-Case" class="headerlink" title="Snake Case"></a>Snake Case</h2><p>这是书写复合词或短语的一种惯例（practice）。复合词或短语中的各个单词之间用下划线（_）分隔并且没有空格。复合词中的每一个单词的首字母通常都是小写的，并且复合词的第一个字母既可以是大写的又可以是小写的，例如：“foo_bar”和“Hello_world”。一般认为 Snake Case 的可读性要比 Camel Case 要强。</p>]]></content>
    
    <summary type="html">
    
      命名规范对于学习一门语言就像是在给房子打地基
    
    </summary>
    
    
      <category term="规范" scheme="http://leeeing.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="python" scheme="http://leeeing.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>React Learn</title>
    <link href="http://leeeing.com/2018/01/19/react-learn/"/>
    <id>http://leeeing.com/2018/01/19/react-learn/</id>
    <published>2018-01-19T03:11:33.000Z</published>
    <updated>2018-07-16T08:30:47.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react"><a href="#react" class="headerlink" title="react"></a>react</h1><pre><code>一些基本概念</code></pre><a id="more"></a><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><p>constructor(props, context)：构造函数，在创建组件的时候调用一次。</p></li><li><p>componentWillMount()：在组件挂载之前调用一次。如果在这个函数里面调用setState，本次的render函数可以看到更新后的state，并且只渲染一次。</p></li><li><p>componentDidMount()：在组件挂载之后调用一次。这个时候，子主键也都挂载好了，可以在这里使用refs。</p></li><li><p>componentWillReceiveProps(nextProps)：props是父组件传递给子组件的。父组件发生render的时候子组件就会调用componentWillReceiveProps（不管props有没有更新，也不管父子组件之间有没有数据交换）。</p></li><li><p>shouldComponentUpdate(nextProps, nextState)：组件挂载之后，每次调用setState后都会调用shouldComponentUpdate判断是否需要重新渲染组件。默认返回true，需要重新render。在比较复杂的应用里，有一些数据的改变并不影响界面展示，可以在这里做判断，优化渲染效率。</p></li><li><p>componentWillUpdate(nextProps, nextState)：shouldComponentUpdate返回true或者调用forceUpdate之后，componentWillUpdate会被调用。</p></li><li><p>componentDidUpdate()：除了首次render之后调用componentDidMount，其它render结束之后都是调用componentDidUpdate。</p></li></ol><p>componentWillMount、componentDidMount和componentWillUpdate、componentDidUpdate可以对应起来。区别在于，前者只有在挂载的时候会被调用；而后者在以后的每次更新渲染之后都会被调用。</p><h3 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h3><ul><li>首次渲染Initial Render</li><li>调用this.setState （并不是一次setState会触发一次render，React可能会合并操作，再一次性进行render）</li><li>父组件发生更新（一般就是props发生改变，但是就算props没有改变或者父子组件之间没有数据交换也会触发render）</li><li>调用this.forceUpdate</li></ul><h2 id="组件在初始化时会触发5个钩子函数："><a href="#组件在初始化时会触发5个钩子函数：" class="headerlink" title="组件在初始化时会触发5个钩子函数："></a>组件在初始化时会触发5个钩子函数：</h2><ol><li>getDefaultProps()<blockquote><p>设置默认的props，也可以用dufaultProps设置组件的默认属性。</p></blockquote></li><li>getInitialState()<blockquote><p>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。</p></blockquote></li><li>componentWillMount()<blockquote><p>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p></blockquote></li><li>render()<blockquote><p>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p></blockquote></li><li>componentDidMount()<blockquote><p>组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。</p></blockquote></li></ol><h2 id="react-python"><a href="#react-python" class="headerlink" title="react-python"></a>react-python</h2><blockquote><p>react负责前端，python负责后端</p></blockquote><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>1、在 package.json 中配置 proxy<br>配合python的 <code>flask</code> 框架</p><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"blog"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"antd"</span>: <span class="string">"^3.1.3"</span>,</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"^0.17.1"</span>,</span><br><span class="line">    <span class="string">"node-sass"</span>: <span class="string">"^4.7.2"</span>,</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.2.0"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.2.0"</span>,</span><br><span class="line">    <span class="string">"react-router-dom"</span>: <span class="string">"^4.2.2"</span>,</span><br><span class="line">    <span class="string">"react-scripts"</span>: <span class="string">"1.1.0"</span>,</span><br><span class="line">    <span class="string">"sass"</span>: <span class="string">"^1.0.0-beta.4"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span>: <span class="string">"^6.0.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">    <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"proxy"</span>: <span class="string">"http://localhost:5000/"</span> <span class="comment">// python flask  默认的端口（可配置）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、项目中安装 axios 。如上的 <code>dependencies</code></p><p>3、app.py</p><figure class="highlight js"><figcaption><span>python-server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">user_db = client[<span class="string">'myblog'</span>][<span class="string">'users'</span>]</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">'/api/users'</span>, methods=[<span class="string">'GET'</span>])</span><br><span class="line">def users():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'success'</span>: True,</span><br><span class="line">        <span class="string">'msg'</span>: <span class="string">'leeing'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    # app.run(host='192.168.191.1')</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure><p>3、使用</p><figure class="highlight js"><figcaption><span>react-demo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    axios.get(<span class="string">'/api/users'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"m-music"</span>&gt;</span><br><span class="line">        &lt;h1&gt;我的音乐，我的电台&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button&gt;检查一些字段&lt;/</span>Button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 控制台就可以获取到了</span></span><br><span class="line"><span class="regexp">&#123;data: &#123;…&#125;, status: 200, statusText: "OK", headers: &#123;…&#125;, config: &#123;…&#125;, …&#125;</span></span><br><span class="line"><span class="regexp">  config:&#123;adapter: ƒ, transformRequest: &#123;…&#125;, transformResponse: &#123;…&#125;, timeout: 0, xsrfCookieName: "XSRF-TOKEN", …&#125;</span></span><br><span class="line"><span class="regexp">  data:</span></span><br><span class="line"><span class="regexp">    msg:"leeing"</span></span><br><span class="line"><span class="regexp">    success:true</span></span><br><span class="line"><span class="regexp">  __proto__:Object</span></span><br><span class="line"><span class="regexp">  headers:&#123;date: "Sun, 21 Jan 2018 02:25:17 GMT", server: "Werkzeug/</span><span class="number">0.14</span><span class="number">.1</span> Python/<span class="number">3.6</span><span class="number">.4</span><span class="string">", connection: "</span>keep-alive<span class="string">", x-powered-by: "</span>Express<span class="string">", content-length: "</span><span class="number">42</span><span class="string">", …&#125;</span></span><br><span class="line"><span class="string">  request:XMLHttpRequest &#123;onreadystatechange: ƒ, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …&#125;</span></span><br><span class="line"><span class="string">  status:200</span></span><br><span class="line"><span class="string">  statusText:"</span>OK<span class="string">"</span></span><br></pre></td></tr></table></figure><p><strong>但是我就是想要使用 fetch 不想使用 axios 怎么办？</strong></p><p>1、后端配置可跨域</p><figure class="highlight python"><figcaption><span>app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, make_response</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">user_db = client[<span class="string">'myblog'</span>][<span class="string">'users'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/api/users', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'success'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'msg'</span>: <span class="string">'leeing'</span></span><br><span class="line">    &#125;</span><br><span class="line">    rst = make_response(jsonify(data))</span><br><span class="line">    rst.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">'*'</span></span><br><span class="line">    rst.headers[<span class="string">'Access-Control-Allow-Methods'</span>] = <span class="string">'GET'</span></span><br><span class="line">    rst.headers[<span class="string">'Access-Control-Allow-Headers'</span>] = <span class="string">'x-requested-with,content-type'</span> </span><br><span class="line">    <span class="keyword">return</span> rst, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># app.run(host='192.168.191.1')</span></span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>主要是配置 返回信息的 headers 头部信息</p><p>2、fetch 使用</p><figure class="highlight js"><figcaption><span>music.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="comment">// 第一版比较复杂，还以为这里还需要将后台的端口配置上，同时 fetch 的时候还继续将 headers 配置好。其实没有这个必要了</span></span><br><span class="line">    <span class="comment">// 只要后端配置好了额就可以了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fetch('http://localhost:5000/api/users', &#123;</span></span><br><span class="line">    <span class="comment">//   method: 'GET',</span></span><br><span class="line">    <span class="comment">//   mode: 'cors',</span></span><br><span class="line">    <span class="comment">//   headers: &#123;</span></span><br><span class="line">    <span class="comment">//       'Content-Type': 'application/x-www-form-urlencoded'</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">//   .then(res =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res)</span></span><br><span class="line">    <span class="comment">//     console.log(res.headers.get("content-type"))</span></span><br><span class="line">    <span class="comment">//     return res.json() // 这里就可以使用 res.json（） 了</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">//   .then(data =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(data)</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line"></span><br><span class="line">    fetch(<span class="string">'/api/users'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="built_in">console</span>.log(res.headers.get(<span class="string">"content-type"</span>))</span><br><span class="line">        <span class="keyword">return</span> res.json()</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"m-music"</span>&gt;</span><br><span class="line">        &lt;h1&gt;我的音乐，我的电台&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button&gt;检查一些字段&lt;/</span>Button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 控制台返回的信息</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Response &#123;type: "basic", url: "http:/</span><span class="regexp">/localhost:3000/</span>api/users<span class="string">", redirected: false, status: 200, ok: true, …&#125;</span></span><br><span class="line"><span class="string">music.jsx:13 application/json</span></span><br><span class="line"><span class="string">music.jsx:17 &#123;msg: "</span>leeing<span class="string">", success: true&#125;</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>暂时还不知道为什么使用 <code>axios</code> ，后端就可以不用再配置 返回信息的头部了<br>而且如果是使用 <code>fetch</code> 这样的方式，每一个请求都需要这是一个响应的头部，那不就复杂了。应该是有一个统一的设置<br>到底使用 axios 还是 fetch。可以自己衡量</p><h3 id="403"><a href="#403" class="headerlink" title="403"></a>403</h3><blockquote><p>一堆的 403 下载图片报错</p></blockquote><figure class="highlight js"><figcaption><span>403-image</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>fd296f2f4cb16e.jpg:<span class="number">1</span> GET https:<span class="comment">//img3.doubanio.com/view/site/median/public/5fd296f2f4cb16e.jpg 403 ()</span></span><br><span class="line">Image (<span class="keyword">async</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;react&quot;&gt;&lt;a href=&quot;#react&quot; class=&quot;headerlink&quot; title=&quot;react&quot;&gt;&lt;/a&gt;react&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;一些基本概念
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="前端" scheme="http://leeeing.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://leeeing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://leeeing.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TESTful learning</title>
    <link href="http://leeeing.com/2018/01/19/TESTful-learning/"/>
    <id>http://leeeing.com/2018/01/19/TESTful-learning/</id>
    <published>2018-01-19T01:58:12.000Z</published>
    <updated>2018-07-16T08:30:47.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><p>正好周末开始为 react-blog 写后台。先充电学习一些如何设计 api</p><p>几乎都是参考 阮一峰老师的教程。有空了，再在自己实践的基础上，加上自己的一点理解和感悟。</p><h2 id="一、理解"><a href="#一、理解" class="headerlink" title="一、理解"></a>一、理解</h2><blockquote><p>理论</p></blockquote><p>REST，即Representational State Transfer的缩写 – <strong>表现层状态转化</strong></p><p>如果一个架构符合REST原则，就称它为RESTful架构。</p><p>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义</p><a id="more"></a><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p><p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p><h3 id="表现层（Representation）"><a href="#表现层（Representation）" class="headerlink" title="表现层（Representation）"></a>表现层（Representation）</h3><p>“资源”是一种信息实体，它可以有多种外在表现形式。<strong>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</strong></p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><h3 id="状态转化（State-Transfer）"><a href="#状态转化（State-Transfer）" class="headerlink" title="状态转化（State Transfer）"></a>状态转化（State Transfer）</h3><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>*如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>实战</p></blockquote><h3 id="路径（Endpoint）"><a href="#路径（Endpoint）" class="headerlink" title="路径（Endpoint）"></a>路径（Endpoint）</h3><p>路径又称”终点”（endpoint），表示API的具体网址</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><ul><li><a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></li><li><a href="https://api.example.com/v1/animals" target="_blank" rel="noopener">https://api.example.com/v1/animals</a></li><li><a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></li></ul><h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><ol><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ol><p>下面是一些例子。</p><figure class="highlight js"><figcaption><span>example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园</span><br><span class="line">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE /zoos/ID：删除某个动物园</span><br><span class="line">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><ol><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ol><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h3 id="状态码（Status-Codes）"><a href="#状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><ol><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ol><h3 id="错误处理（Error-handling）"><a href="#错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight js"><figcaption><span>error</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: <span class="string">"Invalid API key"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ol><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ol><h3 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight js"><figcaption><span>response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"link"</span>: &#123;</span><br><span class="line">  <span class="string">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">  <span class="string">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">  <span class="string">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</span><br><span class="line">  <span class="string">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"Requires authentication"</span>,</span><br><span class="line">  <span class="string">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RESTful&quot;&gt;&lt;a href=&quot;#RESTful&quot; class=&quot;headerlink&quot; title=&quot;RESTful&quot;&gt;&lt;/a&gt;RESTful&lt;/h1&gt;&lt;p&gt;正好周末开始为 react-blog 写后台。先充电学习一些如何设计 api&lt;/p&gt;
&lt;p&gt;几乎都是参考 阮一峰老师的教程。有空了，再在自己实践的基础上，加上自己的一点理解和感悟。&lt;/p&gt;
&lt;h2 id=&quot;一、理解&quot;&gt;&lt;a href=&quot;#一、理解&quot; class=&quot;headerlink&quot; title=&quot;一、理解&quot;&gt;&lt;/a&gt;一、理解&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;理论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;REST，即Representational State Transfer的缩写 – &lt;strong&gt;表现层状态转化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一个架构符合REST原则，就称它为RESTful架构。&lt;/p&gt;
&lt;p&gt;要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://leeeing.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://leeeing.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="restful" scheme="http://leeeing.com/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>vue-sundry 杂项</title>
    <link href="http://leeeing.com/2018/01/17/vue-sundry/"/>
    <id>http://leeeing.com/2018/01/17/vue-sundry/</id>
    <published>2018-01-17T01:27:07.000Z</published>
    <updated>2018-07-16T08:30:47.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-杂谈"><a href="#vue-杂谈" class="headerlink" title="vue 杂谈"></a>vue 杂谈</h1><pre><code>时不时会发现自己还有一些知识点是遗漏的</code></pre><a id="more"></a><p>会按照时间顺序来，后面添加的放在前面</p><h2 id="statics-amp-assets"><a href="#statics-amp-assets" class="headerlink" title="statics &amp; assets"></a>statics &amp; assets</h2><blockquote><p>You will notice in the project structure we have two directories for static assets: src/assets and static/. What is the difference between them?</p></blockquote><h3 id="Webpacked-Assets"><a href="#Webpacked-Assets" class="headerlink" title="Webpacked Assets"></a>Webpacked Assets</h3><p>在 *.vue 组件中，所有模板和CSS都会被 vue-html-loader 及 css-loader 解析，并查找资源URL。例如，在 <img src="./logo.png"><br>和 background: url(./logo.png) 中，”./logo.png” 是相对的资源路径，将由Webpack解析为模块依赖。</p><p>因为 logo.png 不是 JavaScript，当被视为模块依赖时，需要使用 url-loader 和 file-loader<br>处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。</p><p>由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将<br>Webpack 处理的静态资源放在 /src 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 /src/assets：可以用模块/组件的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。</p><h3 id="“Real”-Static-Assets"><a href="#“Real”-Static-Assets" class="headerlink" title="“Real” Static Assets"></a>“Real” Static Assets</h3><p>相比之下，static/ 目录下的文件并不会被 Webpack 处理：它们会直接被复制到最终目录（默认是dist/static）下。必须使用绝对路径引用这些文件，这是通过在 config.js 文件中的 build.assetsPublicPath 和 build.assetsSubDirectory 连接来确定的。</p><p>任何放在 static/ 中文件需要以绝对路径的形式引用：/static/[filename]。如果更改 assetSubDirectory 的值为 assets，那么路径需改为 /assets/[filename]。</p><p>assets里面的会被webpack打包进你的代码里，而static里面的，就直接引用了。<br>一般在static里面放一些类库的文件，在assets里面放属于该项目的资源文件。</p><p>简单的讲，static放别人家的，assets放自己写的。</p><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>之前使用 <code>props</code> 的时候都是通过父组件传递一个属性到子组件，子组件内部通过一个 <code>props: [&#39;prop-name&#39;]</code> 的属性接收来自父组件传递过来的数据<br>而最近重新研读 vue 的官方文档。发现遗漏了 props 在子组件中的验证<br><strong>官方</strong>：我们可以为组件的 prop 指定验证规则。如果传入的数据不符合要求，Vue 会发出警告，这对于开发给他人使用的组件非常有用。双手赞成 – 以后我自己也要封装一些我觉得常用的组件。或者我项目中私人定制的组件。</p><figure class="highlight js"><figcaption><span>自己尝试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'slot'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    items: &#123;</span><br><span class="line">      validator (val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(val) === <span class="string">'[object Array]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      hi: <span class="string">'I dont know what this present'</span>,</span><br><span class="line">      topic: <span class="string">'抡起巴比伦'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>亲自测试过后，原本items 是一个需要父组件使用本组件时，传入一个数组类型的属性。如果时对象或者函数，那都是会提示错误信息的。注意到，验证 items 的时候，我使用了 validator 函数，自定义验证规则。这点很爽！</p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><blockquote><p>等时间</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue-杂谈&quot;&gt;&lt;a href=&quot;#vue-杂谈&quot; class=&quot;headerlink&quot; title=&quot;vue 杂谈&quot;&gt;&lt;/a&gt;vue 杂谈&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;时不时会发现自己还有一些知识点是遗漏的
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://leeeing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://leeeing.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>slot:使用插槽分发内容 学习</title>
    <link href="http://leeeing.com/2018/01/16/vue-slot/"/>
    <id>http://leeeing.com/2018/01/16/vue-slot/</id>
    <published>2018-01-16T05:46:30.000Z</published>
    <updated>2018-07-16T08:30:47.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-slot"><a href="#vue-slot" class="headerlink" title="vue-slot"></a>vue-slot</h1><pre><code>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</code></pre><p>在编写组件的内容里面存在 <code>&lt;slot&gt;</code> 插口</p><a id="more"></a><h2 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h2><p>顾名思义，组件里面只有一个插口 <code>&lt;slot&gt;&lt;/slot&gt;</code></p><p><strong>注意</strong>：如果子组件里面模板里面没有 插口，那么从父组件里面给子组件添加的内容加会被<em>抛弃</em></p><figure class="highlight plain"><figcaption><span>my-component</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;我是子组件的标题&lt;/h2&gt;</span><br><span class="line">  &lt;slot&gt;</span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>parent-component</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是更多的初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>render-output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是更多的初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要是 <code>my-component</code> 组件里面没有 <code>slot</code>,那么子组件只会渲染 h2 标签里面的内容</p><figure class="highlight html"><figcaption><span>youdontwant</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><pre><code>插槽多了，需要给 slot 增加一个特殊的属性 name</code></pre><p>具名插槽将匹配内容片段中对应的 <code>slot</code> 特性的元素 – name 相同的放入对应的slot里面，没有匹配到的 slot name，放入默认的 匿名插槽里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=<span class="string">"header"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">  &lt;main&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">  &lt;footer&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot name="footer"&gt;&lt;/</span>slot&gt;</span><br><span class="line">  &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在具体的某个页面中调用子组件，里面同时插入内容</span></span><br><span class="line">&lt;app-layout&gt;</span><br><span class="line">  &lt;h1 slot=<span class="string">"header"</span>&gt;这里可能是一个页面标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;p&gt;主要内容的一个段落。&lt;/</span>p&gt;</span><br><span class="line">  &lt;p&gt;另一个主要段落。&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;p slot="footer"&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/app-layout&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 渲染出来的结果</span></span><br><span class="line"><span class="regexp">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1&gt;这里可能是一个页面标题&lt;/</span>h1&gt;</span><br><span class="line">  &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">  &lt;main&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;主要内容的一个段落。&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;另一个主要段落。&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;p&gt;这里有一些联系信息&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>footer&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用于插槽（加鸡腿）"><a href="#作用于插槽（加鸡腿）" class="headerlink" title="作用于插槽（加鸡腿）"></a>作用于插槽（加鸡腿）</h2><pre><code>将子组件的值传到父组件供使用用作一个（能被传值的）可重用模板，来代替已经渲染好的元素</code></pre><p>传递数据的方向有点不同：<br>这里是子组件向父组件传递<br>而我们最常见的是父组件通过 <code>props</code> 向子组件传递数据</p><figure class="highlight js"><figcaption><span>slot-scop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">  &lt;slot text=<span class="string">"hello from child"</span> msg=<span class="string">"tomorrow is wednesday"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>parent-component</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 具体调用子组件是，需要用到 <span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span> 元素 -- 作用于插槽的模板</span><br><span class="line">// slot-prop 的值表示 接收 从子组件传递多来的 prop 对象。 这里是 &#123;text："hello from child"&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from parent<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; props.msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>rendering-output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">    &lt;span&gt;hello <span class="keyword">from</span> parent&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;hello from child&lt;/</span>span&gt;</span><br><span class="line">    &lt;p&gt;tomorrow is wednesday&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 2.5.0+，slot-scope 能被用在任意元素或组件中而不再局限于 <code>&lt;template&gt;</code></p></blockquote><div class="note warning no-icon">这里还没有消化好</div><figure class="highlight html"><figcaption><span>自定义渲染</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-slot</span> <span class="attr">:items</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot-scope</span>=<span class="string">"props"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"slot-item"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; props.text&#125;&#125; -- &#123;&#123; props.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  // 第二版</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-slot</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>子组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 列表组件的模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slot"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"item in items"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:text</span>=<span class="string">"item.text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:msg</span>=<span class="string">"item.msg"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">      what 123</span><br><span class="line">        <span class="comment">&lt;!-- &lt;p&gt;什么意思&lt;/p&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span>我在这里又增加了一点内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'slot'</span>,</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'items'</span>]</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-v-80180a8e</span>=<span class="string">""</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"slot-item"</span>&gt;</span></span><br><span class="line">    what you -- haha</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-v-80180a8e</span>=<span class="string">""</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"slot-item"</span>&gt;</span></span><br><span class="line">    hello -- world</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  // 第二版</span><br><span class="line">  我在这里又增加了一点内容   // 这里并没有渲染出 h1 标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还不是很理解这里的使用套路</p><p><strong>摘自知乎的一个回答</strong>：vue的作用域插槽本质上就是一个具名slot，将父组件作用域的<code>&lt;template&gt;</code>与子组件的具名slot绑定，从而让子组件能直接在slot中写v-for、v-if等渲染DOM结构;并借<code>&lt;template&gt;</code>的scope特性接收子slot传递的数据，在template中填充其内容。</p><p>更具上面的提示，修改一下之前的代码</p><figure class="highlight html"><figcaption><span>update</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slot"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"item in items"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:text</span>=<span class="string">"item.text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:msg</span>=<span class="string">"item.msg"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        what 123</span><br><span class="line">        <span class="comment">&lt;!-- &lt;p&gt;什么意思&lt;/p&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里写入备用内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">info</span>=<span class="string">"I dont know what this present"</span>&gt;</span></span><br><span class="line">        我也不知道这里些什么</span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'slot'</span>,</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'items'</span>],</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      hi: <span class="string">'I dont know what this present'</span>,</span></span><br><span class="line"><span class="javascript">      topic: <span class="string">'抡起巴比伦'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// parent</span><br><span class="line"><span class="tag">&lt;<span class="name">my-slot</span> <span class="attr">:items</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot-scope</span>=<span class="string">"props"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"slot-item"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; props.text&#125;&#125; -- &#123;&#123; props.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"test"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span>&#123;&#123; props.info &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// output</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-v-80180a8e</span>=<span class="string">""</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"slot-item"</span>&gt;</span></span><br><span class="line">    what you -- haha</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-v-80180a8e</span>=<span class="string">""</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"slot-item"</span>&gt;</span></span><br><span class="line">    hello -- world</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-v-80180a8e</span>=<span class="string">""</span> <span class="attr">data-v-10cb672e</span>=<span class="string">""</span>&gt;</span>I dont know what this present<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  // 这个时候渲染出了 h1 标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note primary no-icon">能再来一个实际一点的例子就好了</div><figure class="highlight html"><figcaption><span>实际例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="别人优秀的使用"><a href="#别人优秀的使用" class="headerlink" title="别人优秀的使用"></a>别人优秀的使用</h3><ol><li><el-table>组件中存在slot插槽，使其能够将父组件作用域的内容渲染子组件中</el-table></li><li></li><li>template中scope对象包含的值主要是在子组件上通过作用域插槽slot的属性决定的</li></ol><h2 id="再读杂项"><a href="#再读杂项" class="headerlink" title="再读杂项"></a>再读杂项</h2><p>在编写组件时，最好考虑好以后是否要进行复用。一次性的组件间有紧密的耦合没有关系。但是可服用组件应该定义一个清晰的公开接口，同时也不要对其使用的外层数据做出任何假设</p><p>Vue 组件的API来自三个部分 – prop、事件、插槽</p><ul><li><strong>Prop</strong> 允许外部环境传递数据给组件</li><li><strong>事件</strong> 允许组件内触发外部环境的副作用</li><li><strong>插槽</strong> 允许外部环境将额外的内容组合在组件内</li></ul><p>这里的第三条，给了我一点对 slot 的理解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:foo</span>=<span class="string">"baz"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:bar</span>=<span class="string">"qux"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">event-a</span>=<span class="string">"doThis"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">event-b</span>=<span class="string">"doThat"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"main-text"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h3><p>当注册组件或者 prop 时，可以使用 kebab-case（短横线分割命名）、camelCase（驼峰式命名）、PascalCase（单词首字母大写命名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件定义中</span></span><br><span class="line">components: &#123;</span><br><span class="line">  <span class="comment">// 使用 kebab-case 注册</span></span><br><span class="line">  <span class="string">'kebab-cased-component'</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// 使用 camelCase 注册</span></span><br><span class="line">  <span class="string">'camelCasedComponent'</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// 使用 PascalCase 注册</span></span><br><span class="line">  <span class="string">'PascalCasedComponent'</span>: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 HTML 模板中，请使用 kebab-case：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;kebab-cased-component&gt;<span class="xml"><span class="tag">&lt;/<span class="name">kebab-cased-component</span>&gt;</span></span></span><br><span class="line">&lt;camel-cased-component&gt;&lt;/camel-cased-component&gt;</span><br><span class="line">&lt;pascal-cased-component&gt;&lt;/pascal-cased-component&gt;</span><br></pre></td></tr></table></figure><p>如果组件未经 slot 元素传入内容，你甚至可以在组件名后使用 / 使其自闭合：</p><pre><code>&lt;my-component/&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      制作高级复杂组件必备技能
    
    </summary>
    
      <category term="前端" scheme="http://leeeing.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://leeeing.com/tags/js/"/>
    
      <category term="vue" scheme="http://leeeing.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>学习 React-router4 时踩的坑</title>
    <link href="http://leeeing.com/2018/01/16/react-rouuter@4/"/>
    <id>http://leeeing.com/2018/01/16/react-rouuter@4/</id>
    <published>2018-01-16T02:39:44.000Z</published>
    <updated>2018-07-16T08:30:47.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-router-V4"><a href="#React-router-V4" class="headerlink" title="React-router.V4"></a>React-router.V4</h1><pre><code>路由规则位于布局和 UI 本身之间</code></pre><h2 id="前面-BB"><a href="#前面-BB" class="headerlink" title="前面 BB"></a>前面 BB</h2><p>不得不吐槽，用过 Vue-router，过来再使用这个，很不爽</p><a id="more"></a><h2 id="理论学习"><a href="#理论学习" class="headerlink" title="理论学习"></a>理论学习</h2><p>直接上手，到处是埋伏</p><h3 id="思维模式的转变"><a href="#思维模式的转变" class="headerlink" title="思维模式的转变"></a>思维模式的转变</h3><blockquote><p>概念上将，路由就是一个基本的单元，基本上是一个梅花的配置文件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/home"</span> component=&#123;Home&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><blockquote><p>exact</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br></pre></td></tr></table></figure><p><code>exact</code> 的意思是，需要完全匹配。也有排他性的意思 – 只有一条路由获胜</p><h3 id="包容性路由"><a href="#包容性路由" class="headerlink" title="包容性路由"></a>包容性路由</h3><blockquote><p>只要匹配上路由，就进行内渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Our React Router <span class="number">4</span> App</span><br><span class="line">      &lt;Route path=<span class="string">"/users"</span> component=&#123;UsersMenu&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;main&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path="/</span><span class="string">" exact component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/users<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><p>当我们访问 <code>/users</code> 时，两个组件都会渲染，相同或者不同都没有关系</p><h3 id="排他性路由"><a href="#排他性路由" class="headerlink" title="排他性路由"></a>排他性路由</h3><blockquote><p><switch> 来匹配其中的一个路由</switch></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;PrimaryHeader /&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/users/add"</span> component=&#123;UserAddPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/users"</span> component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">        &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>在 /users 之前策略性地放置了 /users/add 的路由，以确保正确匹配。由于路径 /users/add 将匹配 /users 和 /users/add，所以最好先把 /users/add 放在前面。<br>如果遇到，<code>&lt;Redirect&gt;</code> 组件将会始终执行浏览器重定向，但是当它位于 <switch> 语句中时，只有在其他路由不匹配的情况下，才会渲染重定向组件。</switch></p><h3 id="嵌套布局"><a href="#嵌套布局" class="headerlink" title="嵌套布局"></a>嵌套布局</h3><blockquote><p>这里挖坑挖得最深</p></blockquote><p>表面上看，嵌套布局很简单，但根据你的选择，可能会因为你 <code>组织路由的方式</code> 而遇到阻碍。</p><figure class="highlight jsx"><figcaption><span>反面教材</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/users"</span> exact component=&#123;BrowseUsersPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/users/:userId"</span> component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> exact component=&#123;BrowseProductsPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products/:productId"</span> component=&#123;ProductProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const BrowseUsersPage = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div className="user-sub-layout"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;aside&gt;</span></span><br><span class="line"><span class="regexp">      &lt;UserNav /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;BrowseUserTable /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserProfilePage = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;UserProfile userId=&#123;props.match.params.userId&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到，下面的两个组件中存在相同的 <code>UserNav</code> 组件，这回产生一个重复渲染的问题，因为每次 <code>UserProfilePage</code> 或 <code>BrowseUsersPage</code> 被渲染的时候，一个<code>新的 UserNav</code> 实例被创建，</p><p>思路就应该是将相同的业务组件放在一起</p><figure class="highlight jsx"><figcaption><span>正面例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/users"</span> component=&#123;UserSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> component=&#123;ProductSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const UserSubLayout = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div className="user-sub-layout"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;aside&gt;</span></span><br><span class="line"><span class="regexp">      &lt;UserNav /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/u</span>sers<span class="string">" exact component=&#123;BrowseUsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/users/:userId<span class="string">" component=&#123;UserProfilePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><p>区别在于，将 <code>user</code> 的子路由和基本路由放在同一个组建里面。如此，共同的组件 <code></code>UserNav` 组件就不会被重复渲染了<br><strong>注意</strong>：我们在布局结构中深入嵌套，路由仍然需要识别它们的完整路径才能匹配。为了节省重复输入（以防你决定将“用户”改为其他内容），请改用 props.match.path</p><figure class="highlight jsx"><figcaption><span>优化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path=&#123;props.match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;props.match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><blockquote><p>Props.match</p></blockquote><p>对于知道详情页面渲染的 <code>UserId</code> 以及如何编写沃恩的路由是很有用的。<code>match</code> 对象给我嗯提供了几个属性呢</p><ul><li>match.params</li><li>match.path  // 路由编写的路径：/users/:userId  |  优先选择一个</li><li>match.url   // 浏览器 URL 中的实际路径：/users/12</li></ul><h3 id="避免匹配冲突"><a href="#避免匹配冲突" class="headerlink" title="避免匹配冲突"></a>避免匹配冲突</h3><blockquote><p>一个场景：我们希望能够通过访问 /users/add 和 /users/5/edit 来新增和编辑用户</p></blockquote><figure class="highlight jsx"><figcaption><span>多重匹配</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route exact path=&#123;props.match.path&#125; component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/add`</span>&#125; component=&#123;AddUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId/edit`</span>&#125; component=&#123;EditUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p><strong>Attention</strong>：</p><ol><li>为了确保进行适当的匹配，新增和编辑路由需要战略性地放在详情路由之前。如果详情路径在前面，那么访问 /users/add 时将匹配详情（因为 “add” 将匹配 :userId）。</li><li>如果我们这样创建路径 ${match.path}/:userId(\d+)，来确保 :userId 必须是一个数字，那么我们可以先放置详情路由</li></ol><h3 id="授权路由"><a href="#授权路由" class="headerlink" title="授权路由"></a>授权路由</h3><blockquote><p>根据用户的登陆状态来限制用户访问某些路由</p></blockquote><p>对于未经授权的页面（如“登录”和“忘记密码”）与已授权的页面（应用程序的主要部分）看起来不一样也是常见的。</p><p>解决这个问题，需要考虑一个应用程序的主要入口点</p><figure class="highlight jsx"><figcaption><span>这不就是我一开始遇到的问题吗？</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/auth"</span> component=&#123;UnauthorizedLayout&#125; /&gt;</span><br><span class="line">            &lt;AuthorizedRoute path=<span class="string">"/app"</span> component=&#123;PrimaryLayout&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 我遇到的问题是这样的</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class AppRoute extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor() &#123;</span></span><br><span class="line"><span class="regexp">    super()</span></span><br><span class="line"><span class="regexp">    this.state = &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Router&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="app"&gt;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 第三版：直到使用了 Switch 这个路由控制器。包裹在里面的路由只会匹配到一个 路由。</span></span><br><span class="line"><span class="regexp">          &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Route path="/</span>login<span class="string">" component=&#123;Login&#125;/&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Switch&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          // 第二版：我想增加一个login页面，但是他的基本布局适合home（‘/’）页面是不一样的 -- 没有 菜单栏，侧边栏之类的，只有空白的登陆表单</span></span><br><span class="line"><span class="string">          // 这样写的问题是，我访问 login 路由的时候，还是会将 index 页面的一些布局渲染出来，这可不是我想要的结果</span></span><br><span class="line"><span class="string">          &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/login<span class="string">" component=&#123;Login&#125;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          // 第一版：最初还没有增加 login页面，没有什么大问题，路由放在一起就好了</span></span><br><span class="line"><span class="string">          &#123;/* &lt;Router&gt;</span></span><br><span class="line"><span class="string">            &lt;main className="</span>content<span class="string">"&gt;</span></span><br><span class="line"><span class="string">              &lt;Header /&gt;</span></span><br><span class="line"><span class="string">              &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125;/&gt;</span></span><br><span class="line"><span class="string">              &lt;Route path="</span>/article<span class="string">" component=&#123;Article&#125;/&gt;</span></span><br><span class="line"><span class="string">              &lt;Route path="</span>/todolist<span class="string">" component=&#123;Todo&#125;/&gt;</span></span><br><span class="line"><span class="string">              &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125;/&gt;</span></span><br><span class="line"><span class="string">              &lt;/main&gt;</span></span><br><span class="line"><span class="string">            &lt;/Router&gt; */&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Home extends React.Component &#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">      &lt;div className="</span>home<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;Header /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/todolist<span class="string">" component=&#123;Todo&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/article<span class="string">" component=&#123;Article&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>*<span class="string">" render=&#123;() =&gt; (</span></span><br><span class="line"><span class="string">          &lt;h3&gt;沉舟侧畔千帆过&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        )&#125;/&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 react-redux 与 React Router v4 非常类似，就像之前一样，只需将 BrowserRouter包在 <provider> 中即可。</provider></p><p>但是 AuthorizedRoute 不是 React-routerV4 的一部分，不能通过 <code>react-router-dom</code> 导出。需要自己根据相关 <a href="https://reacttraining.com/react-router/web/example/auth-workflow" target="_blank" rel="noopener">V4文档</a> 辅助编写完成</p><figure class="highlight jsx"><figcaption><span>授权</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorizedRoute</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    getLoggedUser()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">component</span>: Component, pending, logged, ...rest &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Route &#123;...rest&#125; render=&#123;props =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (pending) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">return</span> logged</span><br><span class="line">          ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">          : &lt;Redirect to="/auth/login" /&gt;</span><br><span class="line">      &#125;&#125; /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const stateToProps = (&#123; loggedUserState &#125;) =&gt; (&#123;</span><br><span class="line">  pending: loggedUserState.pending,</span><br><span class="line">  logged: loggedUserState.logged</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default connect(stateToProps)(AuthorizedRoute)</span><br></pre></td></tr></table></figure><p>首先，使用网络请求来 getLoggedUser()，并将 pending 和 logged 插入 Redux 的状态中。pending 仅表示在路由中请求仍在继续。</p><h3 id="其他提示"><a href="#其他提示" class="headerlink" title="其他提示"></a>其他提示</h3><blockquote><p>Link NavLink</p></blockquote><p>NavLink 匹配浏览器的 URL。它可以让我们给任何一个激活的链接设置一个 <code>active</code> 样式。<br>如果没有 exact，由于 v4 的包容性匹配策略，那么在访问 /app/users 时，主页的链接将处于激活中<br>所以参看文章的作者建议：NavLink 带 exact属性等价于 v3 的 <link>，而且更稳定</p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><blockquote><p>最好的部分之一</p></blockquote><p>React-router4 中，几乎所有的东西（包括 <code>&lt;Route&gt;</code> ）都是 React 的一个组件，都是要拿来进行渲染的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>路由不再是那么难以理解了</code></pre><p>我们可以在我们的组件中随时随地的渲染 <code>&lt;Route&gt;</code>。<br>当满足某些条件（path匹配）时，应用程序的整个内容都可以路由到 相干组件，进行渲染，当某些条件不满足的时候，我们可以一处路由，隐藏某些组件，或者渲染其他的一些组件<br>什么？还有 <code>递归路由</code>。<br>好吧，我还需要继续学习</p><p>看来，默写组件只需要向上面那样，只写一个简单的 函数就可以了，不必要写一个 class 类。<br>而且，写函数的话，传参更加方便</p><p>从一个简单的 todolist 开始学 react，到开始尝试使用 react-router，满满都是坑啊。<br>但是，看完了一些前人的总结之后，猛地还是有很多<strong>豁然开朗</strong>的感觉<br>继续学习</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><blockquote><p>填坑的道路上，你们的分享就是指路明灯</p></blockquote><p><a href="http://blog.csdn.net/sinat_17775997/article/details/77411324" target="_blank" rel="noopener">关于 React Router 4 的一切</a></p>]]></content>
    
    <summary type="html">
    
      遇到简单的坑，没有人及时给与一些指点，很难受
    
    </summary>
    
      <category term="前端" scheme="http://leeeing.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://leeeing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://leeeing.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Vue 数据绑定学习</title>
    <link href="http://leeeing.com/2018/01/12/vue-dataBinding/"/>
    <id>http://leeeing.com/2018/01/12/vue-dataBinding/</id>
    <published>2018-01-12T02:01:50.000Z</published>
    <updated>2018-07-16T08:30:47.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><div class="note success no-icon"><p>将DOM与Vue实例的data数据绑定在一起，彼此之间相互影响</p></div><a id="more"></a><h3 id="简单的数据绑定知识"><a href="#简单的数据绑定知识" class="headerlink" title="简单的数据绑定知识"></a>简单的数据绑定知识</h3><pre><code>Object.defineProperty</code></pre><p>用法： Object.defineProperty(obj, ‘key’, descriptor)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'lee'</span>, &#123;</span><br><span class="line">  value: <span class="string">'ing'</span>,</span><br><span class="line">  <span class="comment">// 几个描述符的值 默认都为 false</span></span><br><span class="line">  wirtabel: <span class="literal">false</span>,  <span class="comment">// 可更改</span></span><br><span class="line">  configurable: <span class="literal">false</span>,  <span class="comment">// 属性是否可删除，以及其他特性是否可被修改</span></span><br><span class="line">  enumerable: <span class="literal">false</span>  <span class="comment">// 可枚举 for ... in 和 Object.keys()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  <span class="comment">// get，set 不能和value一起出现</span></span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="comment">// 返回值,必须要指定返回值</span></span><br><span class="line">    <span class="comment">// return foo</span></span><br><span class="line">    <span class="keyword">return</span> obj.msg</span><br><span class="line">  &#125;,</span><br><span class="line">  set(val) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    obj.lee = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Object.defineProperty 中的 get 和 set 方法 – 访问器：会随着数据的变化而直接变化</p><p>当我们将一个普通的 js 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter<br>用户看不到 getter/setter， 但是内部他们让 Vue 追踪依赖，在属性被访问和修改的时候通知变化。<br>每个组件实例都有相应的 watcher 实例对象，他会在组件渲染的过程中把属性记录为依赖，之后依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新</p><h3 id="一个简单的数据双向绑定的例子"><a href="#一个简单的数据双向绑定的例子" class="headerlink" title="一个简单的数据双向绑定的例子"></a>一个简单的数据双向绑定的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"txt"</span> /&gt;</span><br><span class="line">&lt;span id=<span class="string">"sp"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>),</span><br><span class="line">    sp = <span class="built_in">document</span>.getElementById(<span class="string">'sp'</span>),</span><br><span class="line">    obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给对象obj添加msg属性，并设置setter访问器</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'msg'</span>, &#123;</span><br><span class="line">  <span class="comment">// 设置 obj.msg  当obj.msg反生改变时set方法将会被调用  </span></span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当obj.msg被赋值时 同时设置给 input/span</span></span><br><span class="line">    txt.value = newVal</span><br><span class="line">    sp.innerText = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听文本框的改变 当文本框输入内容时 改变obj.msg</span></span><br><span class="line">txt.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  obj.msg = event.target.value</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>当数据之前没有在 data 里面。但是后面的逻辑需要往 data 里面动态添加新的数据、属性的时候，这个心添加的数据是 非响应式的</strong><br>因为 Vue 在初始化实例的时候对属性执行 getter/setter 转化过程，所以属性必须在 data 对象存在才能让 Vue 转化它。这样才能实现响应。<br>所以对于后面动态添加进来的数据， Vue 检测不到<br>但是，可以使用下面两种方式实现对这些数据的再次监测</p><ol><li>Vue.set(object, key, value) - 适用于添加单个属性</li><li>Object.assign() - 适用于添加多个属性</li></ol><p>1、如果是实例上面的数据，可以这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.someObject, <span class="string">'foo'</span>, someValue)</span><br></pre></td></tr></table></figure><p>2、适用于向已有对象添加一些属性，可以使用 Object.assign()。但是，添加到对象上的新属性不会触发更新。这种情况可以创建一个新的对象，让它饱含对象的属性和新的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.someObject = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.someObject, &#123;<span class="attr">foo</span>:<span class="string">'cat'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="和这个联系比较紧密的异步DoM更新"><a href="#和这个联系比较紧密的异步DoM更新" class="headerlink" title="和这个联系比较紧密的异步DoM更新"></a>和这个联系比较紧密的异步DoM更新</h3><p>Vue <code>异步</code>执行 DOM 更新，只要观测到数据变化，Vue 将会开启一个队列，并缓冲在同一个事件循环中发生的所有数据变化。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲是去除重复数据对于避免不必要的计算和DOM操作上非常重要。然后在下一个时间循环 tick 中， Vue 刷新队列并执行时机工作<br>当我们直接设置 vm.someData = ‘new value’ 该组件不会立即重新渲染。组件只会在下一个事件循环队列清空时的下一个 tick 更新。如果我们想要立即获取到更新后的数据，则需要通过 Vue.nextTick(callback) – 在DOM 更新后，执行某个操作。实力的话调用 vm.￥nextTick（function()）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  someMethod () &#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = <span class="string">'cahnge'</span> <span class="comment">// 假设原来的 this.msg == 'origin'</span></span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.children[<span class="number">0</span>].innerText)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg) <span class="comment">// 还会是原来的值 origin</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-中的计算属性"><a href="#Vue-中的计算属性" class="headerlink" title="Vue 中的计算属性"></a>Vue 中的计算属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    rawData: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  <span class="comment">// 计算属性的 getter  -- 敲黑板</span></span><br><span class="line">  showData () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rawData.slice(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">既然计算属性有个 getter，当然也就有个 setter</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  <span class="comment">// 注意：这里不是一个函数方法，而是一个 对象。就有点想 Object.defineProperty 中的 descriptor</span></span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastnAME</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set (newVal) &#123;</span><br><span class="line">      <span class="comment">// do somethig</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-双向数据绑定-–-源码学习"><a href="#Vue-双向数据绑定-–-源码学习" class="headerlink" title="Vue 双向数据绑定 – 源码学习"></a>Vue 双向数据绑定 – 源码学习</h3><div class="note success">核心思想是 Object.defineProperty 和 发布-订阅 模式</div><p>整体结构</p><ul><li>改造 Vue 实例中的 data， 通过 Object.defineProperty 将其所有属性设hi为访问器属性</li><li>对每个属性添加 Observer，并在 observer 中添加订阅者对象序列</li><li>添加订阅者对象 Watcher，每次初始化的时候添加到对应 data 属性中的 Dep 中</li></ul><p>简而言之：监听数据变化，管理订阅者/管理者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dep 用于订阅者的存储和收集</span></span><br><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">'Dep`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default class Observer &#123;</span></span><br><span class="line"><span class="string">  constructor (value) &#123;</span></span><br><span class="line"><span class="string">    this.value = value</span></span><br><span class="line"><span class="string">    this.walk(value)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  walk(value) &#123;</span></span><br><span class="line"><span class="string">    Object.keys(value).forEach(key =&gt; this.convert(key, value[key]))</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  convert(key, val) &#123;</span></span><br><span class="line"><span class="string">    defineReactive(this.value, key, val)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export function defineReactive(obj, key, val) &#123;</span></span><br><span class="line"><span class="string">  // 用于存放某个属性的所有订阅者</span></span><br><span class="line"><span class="string">  let dep = new Dep()</span></span><br><span class="line"><span class="string">  let childOb = observe(val)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Object.defineProperty(obj, key, &#123;</span></span><br><span class="line"><span class="string">    enumerable: true,</span></span><br><span class="line"><span class="string">    configurable: true,</span></span><br><span class="line"><span class="string">    get () &#123;</span></span><br><span class="line"><span class="string">      // 如果Dep类存在target属性，将其添加到dep实例的subs数组中</span></span><br><span class="line"><span class="string">      // target指向一个Watcher实例，每个Watcher都是一个订阅者</span></span><br><span class="line"><span class="string">      // Watcher实例在实例化过程中，会读取data中的某个属性，从而触发当前get方法</span></span><br><span class="line"><span class="string">      if (Dep.target) &#123;</span></span><br><span class="line"><span class="string">        dep.addSub(Dep.target)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      return val</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    set (newVal) &#123;</span></span><br><span class="line"><span class="string">      if (val === newVal) &#123;</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      val = newVal</span></span><br><span class="line"><span class="string">      childOb = observe(newVal)</span></span><br><span class="line"><span class="string">      dep.notify()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export function observe(value) &#123;</span></span><br><span class="line"><span class="string">  if (!value || typeof value !== '</span>object<span class="string">') &#123;</span></span><br><span class="line"><span class="string">    return</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  return new Observer(value)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>管理订阅者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">  &#125;</span><br><span class="line">  addSub(sub) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub.update())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">'Dep'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(vm, expOrFn, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm  <span class="comment">// 被订阅的数据一定来自于当前Vue实例</span></span><br><span class="line">    <span class="keyword">this</span>.cb = cb  <span class="comment">// 当数据更新时想要做的事情</span></span><br><span class="line">    <span class="keyword">this</span>.expOrFn = expOrFn  <span class="comment">// 被订阅的数据</span></span><br><span class="line">    <span class="keyword">this</span>.val = <span class="keyword">this</span>.get()  <span class="comment">// 维护更新之前的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对外暴露的接口，用于在订阅的数据被更新时，由订阅者管理员(Dep)调用</span></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="keyword">this</span>.get()</span><br><span class="line">    <span class="keyword">if</span> (val !== <span class="keyword">this</span>.val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.val = val</span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="comment">// 当前订阅者(Watcher)读取被订阅数据的最新更新后的值时，通知订阅者管理员收集当前订阅者</span></span><br><span class="line">    Dep.target = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> val = <span class="keyword">this</span>.vm._data[<span class="keyword">this</span>.expOrFn]</span><br><span class="line">    <span class="comment">// 置空，用于下一个Watcher使用</span></span><br><span class="line">    Dep.target = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Observer, &#123;observe&#125; <span class="keyword">from</span> <span class="string">'Observer'</span></span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">'Watcher'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// 简化了$options的处理</span></span><br><span class="line">    <span class="keyword">this</span>.$options = options</span><br><span class="line">    <span class="comment">// 简化了对data的处理</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data</span><br><span class="line">    <span class="comment">// 将所有data最外层属性代理到Vue实例上</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> <span class="keyword">this</span>._proxy(key))</span><br><span class="line">    <span class="comment">// 监听数据</span></span><br><span class="line">    observe(data)</span><br><span class="line">  &#125;</span><br><span class="line">  $watch(expOrFn, cb) &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="keyword">this</span>, expOrFn, cb)</span><br><span class="line">  &#125;</span><br><span class="line">  _proxy(key) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>._data[key],</span><br><span class="line">      set: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>._data[key] = val</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;双向数据绑定&quot;&gt;&lt;a href=&quot;#双向数据绑定&quot; class=&quot;headerlink&quot; title=&quot;双向数据绑定&quot;&gt;&lt;/a&gt;双向数据绑定&lt;/h2&gt;&lt;div class=&quot;note success no-icon&quot;&gt;&lt;p&gt;将DOM与Vue实例的data数据绑定在一起，彼此之间相互影响&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="前端" scheme="http://leeeing.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://leeeing.com/tags/js/"/>
    
      <category term="前端" scheme="http://leeeing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://leeeing.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue directive 学习</title>
    <link href="http://leeeing.com/2018/01/11/vue-directive/"/>
    <id>http://leeeing.com/2018/01/11/vue-directive/</id>
    <published>2018-01-11T09:55:47.000Z</published>
    <updated>2018-07-16T08:30:47.457Z</updated>
    
    <content type="html"><![CDATA[<pre><code>使用 Vue Directive 封装 `DOM 操作`</code></pre><div class="note success no-icon"><span>指令 (Directives) 是带有 v- 前缀的特殊属性 <br>作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</span><br></div><a id="more"></a><h2 id="vue-directive-简介"><a href="#vue-directive-简介" class="headerlink" title="vue directive 简介"></a>vue directive 简介</h2><p>先放一张图<br><img src="http://p2msyzjlz.bkt.clouddn.com/vue.all.png" alt="vue 大全"></p><p>知道vue有 v-on、v-show、v-if 这些方便我们操作的指令吧<br>对了，就像 vue 的 filter 一样，我们可以自己全局注册或者局部定义组件的名字和相关的指令操作</p><p><img src="http://p2msyzjlz.bkt.clouddn.com/vue.directive.png" alt="vue的相关指令"></p><p>之前不怎么了解（使用），是没有遇到那个需求，今天做公司一个重构的时候，突然发现这个指令，很好</p><p><img src="http://p2msyzjlz.bkt.clouddn.com/vue.v-directive.png" alt="一张图先了解"></p><p>全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'指令的名字'</span>, &#123;</span><br><span class="line">     <span class="comment">//一些option，提供许多hook function 定义directive的具体操作，如inserted、bind...</span></span><br><span class="line">     inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//指令插入元素后的操作</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>局部注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  directives: &#123;</span><br><span class="line">    name: &#123;  <span class="comment">//指令的名字</span></span><br><span class="line">      <span class="comment">// 指令的定义</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>在定义的时候，VUe提供了许多 hook function。例如 inserted、bind等<br>bind：只调用一次，在绑定的对象节点被插入父节点时调用一次的函数，可以用于初始化定义一些样式或者其他动作<br>unbind：只调用一次，在元素被解除绑定时调用<br>inserted：被绑定元素插入父节点时调用;父节点存在即可调用，不必存在于document中<br>update：被绑定的元素所在的模板更新的时候调用，而不论绑定的值是否发生了变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新<br>componentUpdated：被绑定元素所在的模板完成一次更新周期是调用</p><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>指令钩子函数会被传入以下参数：<br>el：指令所绑定的元素，可以用来直接操作 DOM 。<br>binding：一个对象，包含以下属性：</p><ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”</li><li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li></ul><p>vnode：Vue 编译生成的虚拟节点。<br>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p><blockquote><p>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。</p></blockquote><h2 id="为什么要使用这个-vue-directive"><a href="#为什么要使用这个-vue-directive" class="headerlink" title="为什么要使用这个 vue directive"></a>为什么要使用这个 vue directive</h2><p>  为了实现 view 和 viewModule 这两个层的分离</p><p>View 层负责页面上的显示，ViewModule 层负责<code>改变|操作</code>数据，由于Vue是基于数据驱动的，所以我们就不应该（尽量避免）在代码中操作 View 层上面的 DOM 元素<br>另一方面，VUeDirective 是和 DOM 元素紧密联系在一起的，随着 DOM 的创建、销毁一起变化，也就相应的出发了上面说的几个 钩子函数。<br>如此，vue direcitve的生命周期方法能够让我们以一种更加优雅的方式在合适的时机对 DOM 进行必要的操作。<br>而viewModule里面没有和DOM元素相对应的方法，vue directive又是属于 VIew 层面的东西，所以 DOM 操作应该被封装在 vue directive 中 而不是 Vue 的实例中</p><h3 id="demos"><a href="#demos" class="headerlink" title="demos"></a>demos</h3><h3 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h3><figure class="highlight css"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-color-swatch:lee.a="#f90"&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive('color-swatch', function (el, binding) &#123;</span><br><span class="line">  console.log(binding) // Object&#123;name:'color-swatch', arg:'foo', rawName: 'v-color-swatch', value: '#f90', expression: '#f90', modifiers: &#123;&#125;, def: &#123;&#125;&#125;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">还可以传入对象面量</span><br><span class="line"></span><br><span class="line">&lt;div v-demo="&#123; color: 'white', text: 'hello!' &#125;"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive('demo', function (el, binding) &#123;</span><br><span class="line">  console.log(binding.value.color) // =&gt; "white"</span><br><span class="line">  console.log(binding.value.text)  // =&gt; "hello!"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="掘金学习：-scroll-滚动后取数据"><a href="#掘金学习：-scroll-滚动后取数据" class="headerlink" title="掘金学习： scroll 滚动后取数据"></a>掘金学习： scroll 滚动后取数据</h3><figure class="highlight js"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、首先将DOM操作封装到指令的option中</span><br><span class="line"><span class="keyword">let</span> scrollCallback = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body.scrollHeight &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body.scrollHeight - <span class="built_in">window</span>.scrollY - <span class="number">100</span>  <span class="built_in">document</span>.body.clientHeight) &#123;</span><br><span class="line">        callback()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> callBackWarpped <span class="comment">// 新变量 保存引用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">        callBackWarpped =  scrollCallback.bind(&#123;&#125;, binding.value)</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, callBackWarpped)</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">"scroll"</span>, callBackWarpped)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、</span><br><span class="line"><span class="keyword">import</span> scrollDirective <span class="keyword">from</span> <span class="string">'../../directives/scroll'</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、在组件的directives属性中注册这个指令，值为scroll</span><br><span class="line">directives: &#123;</span><br><span class="line">    scroll: scrollDirective</span><br><span class="line">    <span class="comment">//指令的名字:指令的option的名字</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、在相应元素上加上directive指令</span><br><span class="line">v-scroll = <span class="string">"onScroll"</span></span><br><span class="line"><span class="comment">//v-'指令的名字' = "回调函数"</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、编写directive指令中的函数</span><br><span class="line">在method中编写onScroll函数，也就是上文中对应的binding.value，在这个函数中我们将会请求更多数据，而Vue就会执行相应v-scroll中的值。</span><br></pre></td></tr></table></figure><h3 id="自己编写"><a href="#自己编写" class="headerlink" title="自己编写"></a>自己编写</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-leeing:foo.a="shello" placeholder="自定义指令"&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="selector-tag">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="selector-tag">directives</span>: &#123;</span><br><span class="line">    <span class="attribute">chamelon</span>: &#123;</span><br><span class="line">      inserted (el, binding) &#123;</span><br><span class="line">        el.style.background = binding.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">leeing</span>: &#123;</span><br><span class="line">      inserted (el, binding) &#123;</span><br><span class="line">        el.focus() // 插入的时候就自动聚焦</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon"><p>参考：<a href="https://juejin.im/post/5a4b78226fb9a0451a76c1a1?utm_source=gold_browser_extension" target="_blank" rel="noopener">2018 我所了解的 Vue 知识大全</a></p></div><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><pre><code>使用 v-on 绑定自定义事件</code></pre><p>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p><div class="note warning no-icon">用在普通元素上时，只能监听 原生 DOM 事件。<br> 用在自定义元素组件上时，也可以监听子组件触发的自定义事件。</div><p>每个 Vue 实力都实现了<code>事件接口</code></p><ul><li>使用 $on(eventName) 监听事件</li><li>使用 $emit(eventName) 触发事件</li></ul><div class="note warning no-icon">$on 和 $emit 并不是 addEventListener 和 dispatchEvent</div><p>父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。<br>注意：v-on 没有简写。<code>：</code>是 v-bind 的简写 ；v-on 是 @</p><p>在监听原生 DOM 事件时，方法以事件为唯一的参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 对象语法 (2<span class="selector-class">.4</span><span class="selector-class">.0</span>+) <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;button v-on="&#123; mousedown: doThis, mouseup: doThat &#125;"&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 缩写 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">button</span> @<span class="keyword">click</span>="<span class="keyword">doThis</span>"&gt;&lt;/<span class="keyword">button</span>&gt;</span><br></pre></td></tr></table></figure><p>在子组件上监听自定义事件 (当子组件触发“my-event”时将调用事件处理器)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">my-component</span> @<span class="keyword">my</span>-<span class="keyword">event</span>="<span class="keyword">handleThis</span>"&gt;&lt;/<span class="keyword">my</span>-<span class="keyword">component</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;my-component @my-event=<span class="string">"handleThis(123, $event)"</span>&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件中的原生事件 --&gt;</span><br><span class="line">&lt;my-component @click.native=<span class="string">"onClick"</span>&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><p>如果需要在组件上监听一个原生事件。可以添加修饰符！ v-on:click.native=”doSomething”</p><ul><li>.stop - 调用 event.stopPropagation()。</li><li>.prevent - 调用 event.preventDefault()。</li><li>.capture - 添加事件侦听器时使用 capture 模式。</li><li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。</li><li>.native - 监听组件根元素的原生事件。</li><li>.once - 只触发一次回调。</li><li>.left - (2.2.0) 只当点击鼠标左键时触发。</li><li>.right - (2.2.0) 只当点击鼠标右键时触发。</li><li>.middle - (2.2.0) 只当点击鼠标中键时触发。</li><li>.passive - (2.3.0) 以 { passive: true } 模式添加侦听器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 键修饰符，键代码 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> @<span class="keyword">keyup</span>.<span class="keyword">13</span>="<span class="keyword">onEnter</span>"&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><pre><code>动态地绑定一个或多个特性，或一个组件 prop 到表达式。</code></pre><ol><li>在绑定 class 或 style 特性时，支持其它类型的值，如数组或对象</li><li>在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。</li><li>没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。</li></ol><h3 id="几个语法糖"><a href="#几个语法糖" class="headerlink" title="几个语法糖"></a>几个语法糖</h3><p>v-modle</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model="something"&gt;</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">input</span></span><br><span class="line">  v-bind:value="something"</span><br><span class="line">  v-on:input="something = $enent.target.value"</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="vue-书写规范"><a href="#vue-书写规范" class="headerlink" title="vue 书写规范"></a>vue 书写规范</h2><blockquote><p>哪里都有规范</p></blockquote><p><img src="http://p2msyzjlz.bkt.clouddn.com/vue.w-standard.png" alt="Vue 书写规范"></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;使用 Vue Directive 封装 `DOM 操作`
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&quot;note success no-icon&quot;&gt;&lt;span&gt;指令 (Directives) 是带有 v- 前缀的特殊属性 &lt;br&gt;作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM&lt;/span&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://leeeing.com/tags/js/"/>
    
      <category term="前端" scheme="http://leeeing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://leeeing.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>当你开始考虑前端规范的时候</title>
    <link href="http://leeeing.com/2018/01/10/when%20you%20think%20FE%20standard/"/>
    <id>http://leeeing.com/2018/01/10/when you think FE standard/</id>
    <published>2018-01-10T10:39:44.000Z</published>
    <updated>2018-07-16T08:30:47.459Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我只是前端深井的挑水夫</p></blockquote><a id="more"></a><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><blockquote><p>不造轮子，直接使用<a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">Airbnb前端规范</a></p></blockquote><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><blockquote><p>尽量语义化</p></blockquote><h3 id="保持良好的简洁结构"><a href="#保持良好的简洁结构" class="headerlink" title="保持良好的简洁结构"></a>保持良好的简洁结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title很重要，不要缺少<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"img/favicon.ico"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"img/touchicon.png"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、 结构上如果可以并列书写，就不要嵌套。</span><br><span class="line">如果可以写成<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>那么就不要写成<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、如果结构已经可以满足视觉和语义的要求，那么就不要有额外的冗余的结构。</span><br><span class="line">比如<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>已经能满足要求，那么就不要再写成<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3、一个标签上引用的className不要过多，越少越好。</span><br><span class="line">比如不要出现这种情况：<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1 class2 class3 class4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">4、对于一个语义化的内部标签，应尽量避免使用className。</span><br><span class="line">比如在这样一个列表中，li标签中的itm应去除：<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"m-help"</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"itm"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"itm"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在body 中，不同的业务模块之间，或者不同的逻辑大区块之间，可以备注简单的模块内容，一座提示只用</p><h3 id="常用语义化标签"><a href="#常用语义化标签" class="headerlink" title="常用语义化标签"></a>常用语义化标签</h3><p>1.、头部——header和nav标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>html5语义化标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>章节标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>标题标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、 主体部分——main和section</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>章节标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>为页面区分不同的章节<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>包括section article nav aside <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>为不同的章节定义标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>h1 h2 h3 h4 h5 h6六个标题标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、尾部——footer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>copyright &amp;copy hello, world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、页面的轮廓</p><pre><code>section、article、aside、nav</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">aside</span><br><span class="line"> <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>：指定附注栏，包括引述、侧栏、指向文章的一组链接、广告、友情链接、相关产品列表等。</span><br><span class="line">如果放在main内，应该与所在内容密切相关。</span><br><span class="line"></span><br><span class="line">article</span><br><span class="line">适用于独立性强的内容，如本身就是一篇文章、博客，或者用户的评论等，article比section更加强调需要包含一个标题标签h1~h6</span><br><span class="line">具体到项目中，适合于评论区部分，课件介绍</span><br></pre></td></tr></table></figure><p>5、其它一些常用标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span><span class="tag">&lt;/<span class="name">figure</span>&gt;</span>：创建图（默认有40px左右margin）。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span>：指定细则，输入免责声明、注解、署名、版权。</span><br><span class="line">     只适用于短语，不要用来标记“使用条款”、“隐私政策”等长的法律声明。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>：表示内容重要性。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span>：标记内容着重点（大量用于提升段落文本语义）。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">mark</span>&gt;</span>：突出显示文本（yellow），提醒读者。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">cite</span>&gt;</span>：指明引用或者参考，如图书的标题，歌曲、电影、等的名称，演唱会、音乐会、规范、报纸、或法律文件等。</span><br><span class="line">        只用于参考源本身，而不是从中引述。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquoto</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquoto</span>&gt;</span>：引述文本，默认新的一行显示。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span>：标记时间。datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。     </span><br><span class="line">        不再相关的时间用s标签。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span>：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。</span><br><span class="line">        如果提供整个页面的作者联系信息，一般放在页面级footer里。不能包含文档或者文档等其他内容。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span>：移除的内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span>：添加的内容。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>：标记代码。包含示例代码或者文件名 （<span class="tag">&lt; &amp;<span class="attr">lt</span>;  &gt;</span> &amp;gt;）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span>：预格式化文本。保留文本固有的换行和空格。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span>：完成进度。可通过js动态更新value。</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">center</span>&gt;，&lt;<span class="selector-tag">font</span>&gt; 不建议使用</span><br></pre></td></tr></table></figure><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><blockquote><p>图片规范</p></blockquote><h3 id="命名顺序"><a href="#命名顺序" class="headerlink" title="命名顺序"></a>命名顺序</h3><p>图片业务（可选） +（mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）</p><ul><li><p>图片业务</p><ul><li>px: 培训</li><li>yd: 云端</li><li>yw: 运维</li><li>…</li></ul></li><li><p>图片功能</p><ul><li>mon_: 是否公共</li><li>icon: 图标</li><li>logo: LOGO类</li><li>btn: 按钮</li><li>bg: 大背景或者可平铺</li><li>…</li></ul></li><li><p>图片模块</p><ul><li>useravatar: 用户头像</li><li>stdlist: 学员列表</li><li>picmap: 图像库</li><li>…</li></ul></li><li><p>图片精度|描述</p><ul><li>普通: @1x</li><li>Retina: @2x | @3x</li><li>有颜色：@c、同类型有多中颜色用颜色区分</li><li>有背景：@bg</li><li>有边框：@bd</li><li>…</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>1、使用比较多的icon图标<br>痛点：造成好几个图标很类似，想换想统一，但是设计师就是在这个页面、这个模块里面这么设计，使用这个图标；怎么办？<br>使用图片的功能或者模块进行划分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、图片库和试图学习都是使用相同的图标</span><br><span class="line">现状：tupianku、shituxuexi | 培训任务和培训管理的menu图标一样 | menu理论练习、记录</span><br><span class="line">方式：功能 + 模块</span><br><span class="line">优化：icon_mod_imgmap | icon_mod_book | icon_mod_record</span><br><span class="line"></span><br><span class="line">2、左右箭头，使用场景很多，只是大小的区分，切都是做按钮使用.</span><br><span class="line">现状：arrow-left, angle-left</span><br><span class="line">方式：功能 +</span><br><span class="line">优化：btn_arrow-left@1x、btn_arrow-left@2x</span><br><span class="line"></span><br><span class="line">3、添加按钮 +</span><br><span class="line">现状：有简单一个`+`号，有带背景圆圈的`+`号</span><br><span class="line">优化：btn_add、btn_add@bg</span><br></pre></td></tr></table></figure><p>如果项目中期发现了之前的图标可以共用，不要怕麻烦，将图标名称改为 mod_ 共用的。然后在页面中找到对应的图标修改过来</p><h3 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h3><pre><code>GIF、PNG8、PNG24、JPEG、WEBP</code></pre><p>约定：</p><ul><li>内容图<ul><li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li><li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li></ul></li><li>背景图 【背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片】<ul><li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li><li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li><li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li><li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li><li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li></ul></li></ul><p><strong>补充</strong><br>WebP，是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8<br>特点：文件体积小，无损压缩后，比 PNG 文件少了 45％ 的文件大小；有损压缩后，比 JPEG 文件少了 25% - 34% 文件大小；浏览器兼容差</p><h3 id="图片使用"><a href="#图片使用" class="headerlink" title="图片使用"></a>图片使用</h3><pre><code>图标优先考虑icotfont, 再考虑图片精灵</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="" alt="" &gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">CSS</span> 中图片引入不需要引号</span><br><span class="line"><span class="selector-class">.nuc</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(icon.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><blockquote><p>使用sass或者less，前期确定后统一使用一种编译语法</p></blockquote><h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><blockquote><p>css相关的文件夹 | 优先级比较高</p></blockquote><ul><li>css<ul><li>reset</li><li>Mixin</li><li>mod<ul><li>mod1</li><li>mod2</li></ul></li><li>unit<ul><li>btn</li><li>list</li><li>input</li></ul></li></ul></li></ul><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p>1、代码风格：</p><ul><li>展开</li><li>花括号前空一个</li><li>内容<code>缩进四格</code></li><li>末尾<code>添加分号</code></li><li>左括号与类名之间一个空格</li><li>冒号与属性值之间<code>空一格</code></li><li>单个css选择器或新申明开启新行</li><li>不要为 <code>0</code> 指明单位</li><li>rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0</li><li>CSS3 浏览器私有前缀在前，标准前缀在后</li><li>除非你需要透明度而使用rgba，否则都使用#f0f0f0这样的表示方法，并尽量缩写。</li></ul><p>2、选择器：</p><ul><li>不使用ID选择器</li><li>层级关系最多不要超过4级</li></ul><p>3、书写顺序</p><ul><li>布局定位属性：display / position / float / clear / visibility / overflow</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nuc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">'Helvetica Neue'</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-o-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-ms-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、注释格式</p><ul><li>对选择器的注释统一写在被注释对象的上一行，对属性及值的注释写于分号后</li><li>注释内容两端需空格，已确保即使在编码错误的情况下也可以正确解析样式。</li><li>在必要的情况下，可以使用块状注释，块状注释保持统一的缩进对齐。</li><li>原则上每个系列的样式都需要有一个注释，言简意赅的表明名称、用途、注意事项等。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 块状注释文字</span></span><br><span class="line"><span class="comment"> * 块状注释文字</span></span><br><span class="line"><span class="comment"> * 块状注释文字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.m-list</span>&#123;<span class="attribute">width</span>:<span class="number">500px</span>;&#125;</span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">li</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="comment">/* 这里是对line-height的一个注释 */</span><span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>;&#125;</span><br><span class="line"><span class="comment">/* 单行注释文字 */</span></span><br><span class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span>&#123;<span class="attribute">color</span>:<span class="number">#666</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-scss"><a href="#使用-scss" class="headerlink" title="使用 scss"></a>使用 scss</h3><blockquote><p>文件夹加以区分</p></blockquote><p>|– styles<br>|——base<br>        – _base.scss       // 定义基本的 class 类的样式。例如：body、footer、.wrapper、.page<br>        – _reset.scss      // 充值基本的样式<br>        – _variables.scss  // 定义一些共用变量.例如：$prirmary: #F6E27F<br>|——components   // 公用组件样式<br>        – _topbar.scss<br>        – _topnav.scss<br>        – _page.scss<br>|——pages    // 具体业务类组件样式。每个业务类顶层都用各自的业务类名称<code>命名一个class类</code>进行变量类名包裹<br>        – _home.scss   // 主页<br>        – _post.scss   // 提交<br>        – _topic.scss  // 课件<br>        – _study.scss  // 学习<br>        – _image.dr/ct.scss  // 图像<br>|——mixin    // 共用的mixin方法<br>        – _btn.scss<br>        – _input.scss<br>|——main.scss    // 主文件，将上面的几个文件夹里面的.scss文件统一引入进来</p><p>分离出去的sass文件在命名的时候前面加下划线 <code>_</code> ，这是告诉 sass不要编译这些文件，但是在 main.scss 导入的时候不需要添加下划线<br><strong>注意</strong>：不可以同时存在添加下划线与未添加下划线的同名文件，添加下划线的文件将会被忽略。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><blockquote><p>使用 <code>-</code> 连接符，不使用驼峰命名、全部小写</p></blockquote><table><thead><tr><th style="text-align:left">类别</th><th>名称</th></tr></thead><tbody><tr><td style="text-align:left">布局（grid）</td><td>.g-</td></tr><tr><td style="text-align:left">模块（module）</td><td>.m-</td></tr><tr><td style="text-align:left">元件（unit）</td><td>.u-</td></tr><tr><td style="text-align:left">功能（function）</td><td>.f-</td></tr></tbody></table><p>统一语义理解和命名</p><p>布局</p><table><thead><tr><th>语义</th><th>命名</th><th>简写</th></tr></thead><tbody><tr><td>文档</td><td>doc</td><td>doc</td></tr><tr><td>头部</td><td>head</td><td>hd</td></tr><tr><td>主体</td><td>body</td><td>bd</td></tr><tr><td>尾部</td><td>foot</td><td>ft</td></tr><tr><td>主栏</td><td>main</td><td>mn</td></tr><tr><td>主栏子容器</td><td>mainc</td><td>mnc</td></tr><tr><td>侧栏</td><td>side</td><td>sd</td></tr><tr><td>侧栏子容器</td><td>sidec</td><td>sdc</td></tr><tr><td>盒容器</td><td>wrap/box</td><td>wrap/box</td></tr></tbody></table><p>模块、元件</p><table><thead><tr><th>语义</th><th>命名</th><th>简写</th></tr></thead><tbody><tr><td>导航</td><td>nav</td><td>nav</td></tr><tr><td>子导航</td><td>subnav</td><td>snav</td></tr><tr><td>面包屑</td><td>crumb</td><td>crm</td></tr><tr><td>菜单</td><td>menu</td><td>menu</td></tr><tr><td>选项卡</td><td>tab</td><td>tab</td></tr><tr><td>标题区</td><td>head/title</td><td>hd/tt</td></tr><tr><td>内容区</td><td>body/content</td><td>bd/ct</td></tr><tr><td>列表</td><td>list</td><td>lst</td></tr><tr><td>表格</td><td>table</td><td>tb</td></tr><tr><td>表单</td><td>form</td><td>fm</td></tr><tr><td>热点</td><td>hot</td><td>hot</td></tr><tr><td>排行</td><td>top</td><td>top</td></tr><tr><td>登录</td><td>login</td><td>log</td></tr><tr><td>标志</td><td>logo</td><td>logo</td></tr><tr><td>广告</td><td>advertise</td><td>ad</td></tr><tr><td>搜索</td><td>search</td><td>sch</td></tr><tr><td>幻灯</td><td>slide</td><td>sld</td></tr><tr><td>提示</td><td>tips</td><td>tips</td></tr><tr><td>帮助</td><td>help</td><td>help</td></tr><tr><td>新闻</td><td>news</td><td>news</td></tr><tr><td>下载</td><td>download</td><td>dld</td></tr><tr><td>注册</td><td>regist</td><td>reg</td></tr><tr><td>投票</td><td>vote</td><td>vote</td></tr><tr><td>版权</td><td>copyright</td><td>cprt</td></tr><tr><td>结果</td><td>result</td><td>rst</td></tr><tr><td>标题</td><td>title</td><td>tt</td></tr><tr><td>按钮</td><td>button</td><td>btn</td></tr><tr><td>输入</td><td>input</td><td>ipt</td></tr></tbody></table><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>执行才能出效果</p></blockquote>]]></content>
    
    <summary type="html">
    
      最初的不规范，必定要在后面狠狠踢你一脚
    
    </summary>
    
      <category term="前端" scheme="http://leeeing.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="规范" scheme="http://leeeing.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="前端" scheme="http://leeeing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018</title>
    <link href="http://leeeing.com/2018/01/06/2018/"/>
    <id>http://leeeing.com/2018/01/06/2018/</id>
    <published>2018-01-06T08:15:11.000Z</published>
    <updated>2018-07-16T08:30:47.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018，「一切都会好起来」5-0"><a href="#2018，「一切都会好起来」5-0" class="headerlink" title="2018，「一切都会好起来」5.0"></a>2018，「一切都会好起来」5.0</h1><p>🎭来北京两年半了<br>【虽然】时间过得很快<br>【但是】给自己加油的力量</p><blockquote class="blockquote-center"><p>路<br>走了一遍又一遍<br>回过头<br>仍是少年</p></blockquote><h2 id="BB"><a href="#BB" class="headerlink" title="BB"></a>BB</h2><blockquote><p>操蛋的生活还在继续</p></blockquote><p>不知道说点什么</p><h2 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h2><h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><blockquote><p>成熟的模板 + 域名 + 空间</p></blockquote><ol><li>wordpress    |  腾讯课堂有视频介绍</li><li>github pages |  已在使用</li></ol><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ol><li>crawler</li><li>flask | django</li><li>matplotpy | PIL</li><li>numpy | scipy  | panda</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>mongodb</li><li>mysql</li><li>redis</li></ol><h2 id="读书清单"><a href="#读书清单" class="headerlink" title="读书清单"></a>读书清单</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li style="list-style: none"><input type="checkbox"> 修改代码的艺术</li><li style="list-style: none"><input type="checkbox"> 重构</li><li style="list-style: none"><input type="checkbox"> 设计模式</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li style="list-style: none"><input type="checkbox"> 流畅的python</li><li style="list-style: none"><input type="checkbox"> python cookbook</li><li style="list-style: none"><input type="checkbox"> flak web开发</li><li style="list-style: none"><input type="checkbox"> </li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>[] </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018，「一切都会好起来」5-0&quot;&gt;&lt;a href=&quot;#2018，「一切都会好起来」5-0&quot; class=&quot;headerlink&quot; title=&quot;2018，「一切都会好起来」5.0&quot;&gt;&lt;/a&gt;2018，「一切都会好起来」5.0&lt;/h1&gt;&lt;p&gt;🎭来北京两年半了&lt;
      
    
    </summary>
    
    
      <category term="plan" scheme="http://leeeing.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="http://leeeing.com/2017/12/31/2017%20year-end%20summary/"/>
    <id>http://leeeing.com/2017/12/31/2017 year-end summary/</id>
    <published>2017-12-31T04:56:45.000Z</published>
    <updated>2018-07-16T08:30:47.447Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说到底，人们烦恼的本质是来自自己无能</p></blockquote><a id="more"></a><figure class="highlight js"><figcaption><span>NewYear</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">2017</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="number">2018</span> <span class="keyword">import</span> *, courage</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><h2 id="BB"><a href="#BB" class="headerlink" title="BB"></a>BB</h2><pre><code>未来不迎，当时不杂，过往不恋</code></pre><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="工作总结和回顾"><a href="#工作总结和回顾" class="headerlink" title="工作总结和回顾"></a>工作总结和回顾</h3><pre><code>差强人意</code></pre><p>1、可圈可点：这一年基本上完成了分配到自己身上的任务。先说任务，不管是图库管理、CT/DR图像显示、学员的学、练、考核、统计模块，考题制作、展示、编辑的模块，都尽可能在最快的时间内完成了，中途还有过对之前业务模块的重构，使得可维护性比之前好很多；也对项目中可复用的页面进行了模块化，模仿vue一样通过数据进行导向，插件也进行了必要的封装，这一方面算是差强人意的表现。再说基本，对图像进一步优化升级上面我做的不够好，尤其CT/DR图像插入tip，手机端上面显示DR图像这几点上面，太依赖于算法那边的配合，没有算法的支持，自己这边前端交互的升级一直看不到明显的进展，也尝试过学习一些底层的知识，发现涉及的知识面比较多，没能深入下去。<br>2、这一年工作能力表现上是能够得到团队的认可的，但是自己（领导）也发现我还不够积极主动的，开会发言比较少，技术交流偏少。除此之外，自己在把握全局产品思想上不够优秀，只是完成了一个业务需求，对业务本身解决的痛点缺少足够深入的思考；同时，对自己提出的经过自己编写的代码要尽可能少的被测试找出问题这一点，虽然自己统计上看出有所改善，但也暴露出一些问题，一是自己的不够细心，二是自己对这个需求的业务逻辑没有足够理解–至少没有测试理解透彻–导致交互逻辑上出现错误。这些虽然对完成工作最后影响不是很大，但是从效率和质量上面考虑还是 – 有待提高。</p><h3 id="2018年工作计划"><a href="#2018年工作计划" class="headerlink" title="2018年工作计划"></a>2018年工作计划</h3><pre><code>持续跟进、独当一面</code></pre><p>继续跟进图像显示操作相关功能的优化升级、和算法同事配合提升项目中CT/DR图像的交互效果，PC端培训项目中能够上线DR走图的功能，解决DR图像在手机端显示的问题<br>新的一年，团队开始实行后端分离，可能自己会负责一些主要的前端模块或者新业务，可能是云门户、云图库资源管理等。这样的话前端的压力也会开始增加，很多的逻辑可能需要自己和同事去考虑，业务需求和交互效果也需要我们前端去沟通了解跟进，自己是否能有一个良好的全局把控力，在需求和展现上做到平衡。</p><h3 id="对个人能力提升、培训、团队建设的建议"><a href="#对个人能力提升、培训、团队建设的建议" class="headerlink" title="对个人能力提升、培训、团队建设的建议"></a>对个人能力提升、培训、团队建设的建议</h3><pre><code>吸收、视野</code></pre><p>打铁还需自身硬，技术能力是自己的立身资本。所以保持一个终身学习的心态，一方面继续吸收前端的前沿技术；另一方面，接触后台，了解后台，使用后台思维去全局看待前端、看清业务的逻辑本质。可能会有一些收获。<br>虽然自己不喜欢讲座式的技术交流，但是我希望自己能够保持一个技术开放的心态，以项目需求为出发点，结合业务和团队成员保持更多的技术交流。<br>新的一年里，我希望能够扩大自己的视野。不局限于技术，还有自己的心态，自己的思维，看问题的角度能够更丰富一些。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><pre><code>学点后台</code></pre><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><pre><code>水还是很深</code></pre><p>这一年重点学习(巩固)了一下这几个技术点</p><ul><li>ES6</li><li>vue</li><li>node + koa</li><li>webpack</li></ul><p>利用vue+koa实现了自己的一个前台显示后端管理的简单博客，里面添加了一些自己练习的功能，例如地图，websocket实时聊天，One， music展示列表等<br>对webpack打工具有一定的了解与使用</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><pre><code>路还很长</code></pre><p>后台主要学习的python这门语言。很喜欢！</p><ul><li>python<ul><li>flask</li><li>爬虫</li></ul></li><li>MongoDB</li><li>MySQL</li><li>redis</li></ul><p>对数据有跟进一步的认识，但还不足<br>没有完成python搭建一个blog的最初项目，有点遗憾，新年里继续<br>python爬虫还是比较简单的入门，没有掌握scrapy<br>其实重点应该是学习<code>http</code>协议，打通前端到后端的壁垒</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><pre><code>丰富多彩</code></pre><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><p>不就是玩嘛，没有什么可说的。太low了，只有国庆的时候去了一趟四川重庆游<br>其他大部分时间都是在北京或者北京郊区游玩<br>所以北京值得去的景点大部分都留下了足迹</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>这点做的不好，前半年还有地铁上看书的习惯，后半年几乎就不看了<br>后期改为听书了，一开始觉得还不错，但是现在想起来<br>缺少自己思考的读书，其实就是人家给你嚼烂的东西让你消化<br>没有什么营养，留给自己思想提升的东西不多<br>读书，这件事，不能偷懒</p><h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><p>锻炼这件事似乎和天气关联起来了<br>气温合适的时候，锻炼的频率比较多，也比较多样<br>跑步，打球，爬山，骑车<br>天气一冷下来，各种懒，一度一两个月都没怎么锻炼，瑜伽垫一直搁在角落<br>定力和执行力还是不好<br>其实回家如果没有直接玩手机或者打开电脑看NBA之类的<br>还是有很充裕的时间锻炼的，意识层面的问题<br>所以，18年会将这个态度更正过来<br>好好锻炼<br>all in</p><h3 id="扩展交际"><a href="#扩展交际" class="headerlink" title="扩展交际"></a>扩展交际</h3><p>少了一点<br>参加了两次前端会议，却没有结识一位前端朋友<br>或添加一位前端大牛，这不能不说是自己没有打开自己<br>不要闭塞自己，尝试去沟通了解<br>keep open</p><h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><pre><code>和时间做朋友，过好每一天</code></pre><p>保持简单，认真对待每一天<br>多反思自己近期的一些工作学习表现，多总结<br>将上一年不足之处好好的改正<br>开通自己的博客之后，用心去维护<br>做到，尽可能<br>记录自己的学习过程<br>记录自己的一些思考、感悟<br>将自己近期的心得好好记录，因为是开放的，所以要<br>keep real</p>]]></content>
    
    <summary type="html">
    
      当往事再回首，是否还是当时的心情
    
    </summary>
    
      <category term="工作" scheme="http://leeeing.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="总结" scheme="http://leeeing.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2017年最后一天上班</title>
    <link href="http://leeeing.com/2017/12/29/work-summary/"/>
    <id>http://leeeing.com/2017/12/29/work-summary/</id>
    <published>2017-12-29T11:25:35.000Z</published>
    <updated>2018-07-16T08:30:47.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>借着这个机会，总结自己这一年工作中存在的问题以及反思如何减轻这些问题给工作上带来的不效率，为2018蓄力准备</p></blockquote><a id="more"></a><h3 id="个人存在的问题"><a href="#个人存在的问题" class="headerlink" title="个人存在的问题"></a>个人存在的问题</h3><ul><li>专业知识深度和广度不够</li><li>工作态度不够专业</li><li>工作效率不高效</li><li>文档整理能力不强</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>专业知识深度和广度不够</p><ul><li>自主学习，多浏览专业领域相关技术网站，技术文章</li><li>了解其他编程语言、前端开发不局限于前端，可以多了解后端的编程思维</li><li>培养逻辑推理和独立思考能力、深刻理解算法和数据结构等相关知识</li><li>向同事请教，多听取比较同事对某个问题的意见看法</li></ul></li><li><p>工作态度不够专业</p><ul><li>认真对待任何事情，不报应付的态度，脚踏实地，多花心思的去做事情</li><li>做事的时候，从多个角度考虑问题，有创意，对待问题从深层次分析，思考深刻，不把工作当作一种负担，时刻改进工作方法，提高工作效率</li><li>工作中遇到挫折可能会打击一些工作热情，做到坚持锻炼保持良好心态，积极心理暗示让自己保持客服困难的信心</li></ul></li><li><p>工作效率不高效</p><ul><li>做好每周工作计划总览、每日工作计划</li><li>做好每日工作总结、反思</li><li>多学习、提高专业知识能力处理复杂问题才能做到应对更从容、更效率</li><li>加强时间意识和紧迫感</li></ul></li><li>文档整理能力不强<ul><li>养成良好的程序注释习惯，而且要用准确的语句描述注释的内容，从写注释的一句话开始锻炼文字表达能力</li><li>阅读别人的相关优秀文档并模仿，锻炼文档编写的组织能力和文字表达能力。我们项目后端的相关接口文档就写得比较规范友好</li><li>尝试自己编写一些前端规范文档或者技术文档，总结亦或沉淀</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>时代在发展，技术在进步，要始终保持一颗拼搏向上的心。面对工作生活的各种困难，多反思多总结，不断学习进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;借着这个机会，总结自己这一年工作中存在的问题以及反思如何减轻这些问题给工作上带来的不效率，为2018蓄力准备&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://leeeing.com/tags/work/"/>
    
  </entry>
  
</feed>
